"use strict";(self.webpackChunkyaomin=self.webpackChunkyaomin||[]).push([[3841],{9916:(e,i,l)=>{l.r(i),l.d(i,{data:()=>a});const a={key:"v-158c897c",path:"/algorithm/digital_certificate.html",title:"数字证书",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"定义",slug:"定义",children:[]},{level:2,title:"函数加密",slug:"函数加密",children:[]},{level:2,title:"零知识证明（zero knowledge validation）",slug:"零知识证明-zero-knowledge-validation",children:[]},{level:2,title:"简介",slug:"简介",children:[]},{level:2,title:"历史",slug:"历史",children:[]},{level:2,title:"山寨币",slug:"山寨币",children:[]},{level:2,title:"原理和设计",slug:"原理和设计",children:[{level:3,title:"概念",slug:"概念",children:[]}]}],filePathRelative:"algorithm/digital_certificate.md",git:{contributors:[{name:"yaomin",email:"272991874@qq.com",commits:1}]}}},6127:(e,i,l)=>{l.r(i),l.d(i,{default:()=>C});var a=l(6252);const p=(0,a._)("h1",{id:"数字证书",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#数字证书","aria-hidden":"true"},"#"),(0,a.Uk)(" 数字证书")],-1),t={class:"table-of-contents"},r=(0,a.Uk)("定义"),n=(0,a.Uk)("函数加密"),h=(0,a.Uk)("零知识证明（zero knowledge validation）"),d=(0,a.Uk)("简介"),s=(0,a.Uk)("历史"),c=(0,a.Uk)("山寨币"),o=(0,a.Uk)("原理和设计"),u=(0,a.Uk)("概念"),b=(0,a.uE)('<p>数字证书用来证明某个公钥是谁的，并且内容是正确的。</p><p>对于非对称加密算法和数字签名来说，很重要的一点就是公钥的分发。一旦公钥被人替换 （典型的如中间人攻击），则整个安全体系将被破坏掉。</p><p>怎么确保一个公钥确实是某个人的原始公钥？ 这就需要数字证书机制。</p><p>顾名思义，数字证书就是像一个证书一样，证明信息和合法性。由证书认证机构 （Certification Authority，CA）来签发，权威的 CA 包括 verisign 等。</p><p>数字证书内容可能包括版本、序列号、签名算法类型、签发者信息、有效期、被签发人、签 发的公开密钥、CA 数字签名、其它信息等等，一般使用最广泛的标准为 ITU 和 ISO 联合制 定的 X.509 规范。</p><p>其中，最重要的包括 签发的公开密钥 、 CA 数字签名 两个信息。因此，只要通过这个证书就能 证明某个公钥是合法的，因为带有 CA 的数字签名。</p><p>更进一步地，怎么证明 CA 的签名合法不合法呢？</p><p>类似的，CA 的数字签名合法不合法也是通过 CA 的证书来证明的。主流操作系统和浏览器里 面会提前预置一些 CA 的证书（承认这些是合法的证书），然后所有基于他们认证的签名都会 自然被认为合法。</p><h1 id="pki-体系" tabindex="-1"><a class="header-anchor" href="#pki-体系" aria-hidden="true">#</a> PKI 体系</h1><p>在非对称加密中，公钥则可以通过证书机制来进行保护，如何管理和分发证书则可以通过 PKI（Public Key Infrastructure）来保障。</p><p>顾名思义，PKI 体系在现代密码学应用领域处于十分基础的地位，解决了十分核心的证书管理 问题。</p><p>PKI 并不代表某个特定的密码学技术和流程，PKI 是建立在公私钥基础上实现安全可靠传递消 息和身份确认的一个通用框架。实现了 PKI 的平台可以安全可靠地管理网络中用户的密钥和 证书，包括多个实现和变种，知名的有 RSA 公司的 PKCS（Public Key Cryptography Standards）标准和 X.509 规范等。</p><p>一般情况下，PKI 至少包括如下组件：</p><ul><li>CA（Certification Authority）：负责证书的颁发和作废，接收来自 RA 的请求，是最核心 的部分；</li><li>RA（Registration Authority）：对用户身份进行验证，校验数据合法性，负责登记，审 核过了就发给 CA；</li><li>证书数据库：存放证书，一般采用 LDAP 目录服务，标准格式采用 X.500 系列。</li></ul><p>CA 是最核心的组件，主要完成对证书的管理。</p><p>常见的流程为，用户通过 RA 登记申请证书，CA 完成证书的制造，颁发给用户。用户需要撤 销证书则向 CA 发出申请。</p><p>之前章节内容介绍过，密钥有两种类型：用于签名和用于加解密，对应称为 签名密钥对 和 加 密密钥对 。</p><p>用户证书可以有两种方式。一般可以由 CA 来生成证书和私钥；也可以自己生成公钥和私钥， 然后由 CA 来对公钥进行签发。后者情况下，当用户私钥丢失后，CA 无法完成恢复。</p><h1 id="merkle-树" tabindex="-1"><a class="header-anchor" href="#merkle-树" aria-hidden="true">#</a> Merkle 树</h1>',19),g=["src"],f=(0,a.uE)('<p>默克尔树（又叫哈希树）是一种二叉树，由一个根节点、一组中间节点和一组叶节点组成。 最下面的叶节点包含存储数据或其哈希值，每个中间节点是它的两个孩子节点内容的哈希 值，根节点也是由它的两个子节点内容的哈希值组成。</p><p>进一步的，默克尔树可以推广到多叉树的情形。</p><p>默克尔树的特点是，底层数据的任何变动，都会传递到其父亲节点，一直到树根。</p><p>默克尔树的典型应用场景包括：</p><ul><li>快速比较大量数据：当两个默克尔树根相同时，则意味着所代表的数据必然相同。</li><li>快速定位修改：例如上例中，如果 D1 中数据被修改，会影响到 N1，N4 和 Root。因 此，沿着 Root --&gt; N4 --&gt; N1，可以快速定位到发生改变的 D1；</li><li>零知识证明：例如如何证明某个数据（D0……D3）中包括给定内容 D0，很简单，构造 一个默克尔树，公布 N0，N1，N4，Root，D0 拥有者可以很容易检测 D0 存在，但不知 道其它内容。</li></ul><h1 id="同态加密" tabindex="-1"><a class="header-anchor" href="#同态加密" aria-hidden="true">#</a> 同态加密</h1><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>同态加密（Homomorphic Encryption）是一种特殊的加密方法，允许对密文进行处理得到仍 然是加密的结果，即对密文直接进行处理，跟对明文进行处理再加密，得到的结果相同。从 代数的角度讲，即同态性。</p><p>如果定义一个运算符 ，对加密算法 E 和 解密算法 D ，满足：</p><p>则意味着对于该运算满足同态性。</p><p>同态性在代数上包括：加法同态、乘法同态、减法同态和除法同态。同时满足加法同态和乘 法同态，则意味着是 代数同态 ，即 全同态 。同时满足四种同态性，则被称为 算数同态 。</p><p>##历史 同态加密的问题最早是由 Ron Rivest、Leonard Adleman 和 Michael L. Dertouzos 在 1978 年提出，但 第一个“全同态”的算法 到 2009 年才被克雷格·金特里（Craig Gentry）证明。</p><p>仅满足加法同态的算法包括 Paillier 和 Benaloh 算法；仅满足乘法同态的算法包括 RSA 和 ElGamal 算法。</p><p>同态加密在云时代的意义十分重大。目前，从安全角度讲，用户还不敢将敏感信息直接放到 第三方云上进行处理。如果有了比较实用的同态加密技术，则大家就可以放心的使用各种云 服务了。</p><p>遗憾的是，目前已知的同态加密技术需要消耗大量的计算时间，还远达不到实用的水平。</p><h2 id="函数加密" tabindex="-1"><a class="header-anchor" href="#函数加密" aria-hidden="true">#</a> 函数加密</h2><p>与同态加密相关的一个问题是函数加密。</p><p>同态加密保护的是数据本身，而函数加密顾名思义保护的是处理函数本身，即让第三方看不 到处理过程的前提下，对数据进行处理。</p><p>该问题已被证明是不存在对多个通用函数的任意多 key 的方案，目前仅能做到对某个特定函 数的一个 key 的方案。</p><h1 id="其它问题" tabindex="-1"><a class="header-anchor" href="#其它问题" aria-hidden="true">#</a> 其它问题</h1><h2 id="零知识证明-zero-knowledge-validation" tabindex="-1"><a class="header-anchor" href="#零知识证明-zero-knowledge-validation" aria-hidden="true">#</a> 零知识证明（zero knowledge validation）</h2><p>证明者在不向验证者提供任何有用的信息的前提下，使验证者相信某个论断是正确的。</p><p>例如，A 向 B 证明自己有一个物品，但 B 无法拿到这个物品，无法用 A 的证明去向别人证明 自己也拥有这个物品。</p><h1 id="比特币项目" tabindex="-1"><a class="header-anchor" href="#比特币项目" aria-hidden="true">#</a> 比特币项目</h1><p>做设计，很多时候都是在权衡 trade-off。</p><p>比特币项目是区块链技术首个大规模的成功应用，并且是首个得到实践检验的数字货币实 现，在金融学和信息技术历史上都具有十分重要的意义。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>比特币是基于密码学和经济博弈的一种数字货币，也是历史上首个经过大规模长时间运作检 验的数字货币系统。</p><p>从 blockchain.info 网站 可以从查询到比特币的汇率（以美元为单位）变化历史。</p><h2 id="历史" tabindex="-1"><a class="header-anchor" href="#历史" aria-hidden="true">#</a> 历史</h2><ul><li>2008 年 10 月 31 日，中本聪发布比特币唯一的白皮书：《Bitcoin：A Peer-to-Peer Electronic Cash System/比特币：一种点对点的电子现金系统》。</li><li>2009 年 1 月 3 日，中本聪在位于芬兰赫尔辛基的一个小型服务器上挖出了第一批 50 个比特 币，并记录下当天泰晤士报的头版标题：“ The Times 03/Jan/2009 Chancellor on brink of second bailout for banks ”。</li><li>2010 年 5 月 21 日，第一次比特币交易：佛罗里达程序员 Laszlo Hanyecz 用 1 万 BTC 购买 了价值 25 美元的披萨优惠券。这是比特币的首个兑换汇率：1: 0.0025 美金。这些比特币在 今日价值约 700 万美金。</li><li>2010 年 7 月 17 日，第一个比特币平台成立。</li><li>2011 年，开始出现基于显卡的挖矿设备。2011 年底，汇率约为 2 美元。</li><li>2012 年 9 月 27 日，比特币基金创立，此时比特币价格为 12.46 美元。</li><li>2012 年 11 月 28 日，比特币产量第一次减半。</li><li>2013 年 3 月，1/3 的专业矿工已经采用专用 ASIC 矿机进行挖矿。</li><li>2013年 4 月 10 日，BTC 创下历史最高价，266 美元。</li><li>2013 年 6 月 27日，德国议会作出决定：持有比特币一年以上将予以免税，被业内认为此举 变相认可了比特币的法律地位，此时比特币价格为 102.24 美元。</li><li>2013 年 10 月，世界第一台可以兑换比特币的 ATM 在加拿大上线</li><li>2013 年 11 月 29 日，比特币的交易价格创下 1242 美元的历史新高，而同时黄金价格为一盎 司 1241.98 美元，比特币价格首度超过黄金。</li><li>2014 年 2 月，全球最大比特币交易平台 Mt.Gox 宣告因 85 万个比特币被盗而破产并关闭， 造成大量投资者的损失，比特币价格一度暴跌。</li><li>2014 年 3 月，中国第一台可以兑换比特币的 ATM 在香港上线</li><li>2014 年 6 月，美国加州通过 AB-129 法案，允许比特币等数字货币在加州进行流通。</li><li>2015 年 6 月，纽约成为美国第一个正式进行数字货币监管的州。</li><li>2015 年 10 月，欧盟法院裁定比特币交易免征增值税。</li><li>2016 年 1 月，中国人民银行在京召开了数字货币研讨会，会后发布公告宣称或推出数字货 币。</li><li>2016 年 7 月 9 日，比特币产量第二次减半。</li></ul><p>时至今日，比特币汇率约为 600 美元，总市值在 100 亿 美金。八成的交易量在中国。</p><p>比特币区块链目前生成了约 42 万个区块，完整存储需要约 75 GB 的空间。主流的交易所包 括 Bitstamp、BTC-e、Bitfinex 等。多家投资机构（包括红杉、IDG、软银、红点等）都有布 局。</p><ul><li>注：通过 blockchain.info 可以实时查询到更多详细数据。</li></ul><h2 id="山寨币" tabindex="-1"><a class="header-anchor" href="#山寨币" aria-hidden="true">#</a> 山寨币</h2><p>比特币的“成功”，刺激了相关的生态和社区发展，大量类似数字货币（超过 700 种）纷纷出 现，被称为“山寨币”，比较出名的包括以太币和瑞波（Ripple）币。</p><p>这些山寨币，要么建立在独立的区块链上，要么复用已有的区块链（例如比特币）。</p><h2 id="原理和设计" tabindex="-1"><a class="header-anchor" href="#原理和设计" aria-hidden="true">#</a> 原理和设计</h2><p>比特币网络是一个分布式的点对点网络，网络中的矿工通过“挖矿”来完成对交易记录的记账过 程，维护网络的正常运行。</p><p>比特币通过区块链网络提供一个公共可见的记账本，用来记录发生过的交易的历史信息。</p><p>每次发生交易，用户需要将新交易记录写到比特币区块链网络中，等网络确认后即可认为交 易完成。每个交易包括一些输入和一些输出，未经使用的交易的输出（ Unspent Transaction Outputs，UTXO）可以被新的交易引用作为合法的输入.</p><p>一笔合法的交易，即引用某些已存在交易的 UTXO，作为交易的输入，并生成新的输出的过 程。</p><p>在交易过程中，转账方需要通过签名脚本来证明自己是 UTXO 的合法使用者，并且指定输出 脚本来限制未来对本交易的使用者（为收款方）。对每笔交易，转账方需要进行签名确认。 并且，对每一笔交易来说，总输入不能小于总输出。</p><p>交易的最小单位是“聪”，即 比特币。</p><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><h4 id="账户-地址" tabindex="-1"><a class="header-anchor" href="#账户-地址" aria-hidden="true">#</a> 账户/地址</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>比特币账户采用了非对称的加密算法，用户自己保留私钥，对他发出的交易进行签名确认， 并公开公钥。</p><p>比特币的账户地址其实就是用户公钥经过一系列 hash（HASH160，或先进行 SHA256，然后 进行 RIPEMD160）及编码运算后生成的 160 位（20 字节）的字符串。</p><p>一般，也常常对账户地址串进行 Base58Check 编码，并添加前导字节（表明支持哪种脚本） 和 4 字节校验字节，以提高可读性和准确性。</p><p>注：这里账户并非直接是公钥，而是 hash 后的值，避免公钥过早暴露导致被破解出私钥。</p></div><h4 id="交易" tabindex="-1"><a class="header-anchor" href="#交易" aria-hidden="true">#</a> 交易</h4><p>交易是完成比特币功能的核心概念，一条交易将可能包括如下信息：</p><ul><li>付款人地址：合法的地址，公钥经过 SHA256 和 RIPEMD160 两次 hash，得到 160 位 hash 串；</li><li>付款人对交易的签字确认：确保交易内容不被篡改；</li><li>付款人资金的来源交易 ID：从哪个交易的输出作为本次交易的输入；</li><li>交易的金额：多少钱，跟输入的差额为交易的服务费；</li><li>收款人地址：合法的地址；</li><li>收款人的公钥：收款人的公钥；</li><li>时间戳：交易何时能生效。</li></ul><p>网络中节点收到交易信息后，将进行如下检查：</p><ul><li>交易是否已经处理过；</li><li>交易是否合法。包括地址是否合法、发起交易者是输入地址的合法拥有者、是否是 UTXO；</li><li>交易的输入之和是否大于输出之和。</li></ul><p>检查都通过，则将交易标记为合法的未确认交易，并在网络内进行广播。</p>',53),m=(0,a.Uk)("可以从 blockchain.info 网站查看实时的交易信息。例如一次较新的交易 "),P={href:"https://www.blockchain.com/btc/tx/0beca08914de596217f098d744e3fb8da68aa5e00dd8f63a3364b451f3f4a70f",target:"_blank",rel:"noopener noreferrer"},k=(0,a.Uk)("查看"),A=(0,a.uE)('<h4 id="脚本" tabindex="-1"><a class="header-anchor" href="#脚本" aria-hidden="true">#</a> 脚本</h4><p>脚本（Script） 是保障交易完成（主要用于检验交易是否合法）的核心机制，当所依附的交易 发生时被触发。通过脚本机制而非写死交易过程，比特币网络实现了一定的可扩展性。比特 币脚本语言是一种非图灵完备的语言，类似 Forth 语言。</p><p>一般每个交易都会包括两个脚本：输出脚本（scriptPubKey）和认领脚本（scriptSig）。</p><p>输出脚本一般由付款方对交易设置锁定，用来对能动用这笔交易输出（例如，要花费交易的 输出）的对象（收款方）进行权限控制，例如限制必须是某个公钥的拥有者才能花费这笔交 易。</p><p>认领脚本则用来证明自己可以满足交易输出脚本的锁定条件，即对某个交易的输出（比特 币）的拥有权。</p><p>输出脚本目前支持两种类型：</p><ul><li>P2PKH：Pay-To-Public-Key-Hash，允许用户将比特币发送到一个或多个典型的比特币 地址上（证明拥有该公钥），前导字节一般为 0x00；</li><li>P2SH：Pay-To-Script-Hash，支付者创建一个输出脚本，里边包含另一个脚本（认领脚 本）的哈希，一般用于需要多人签名的场景，前导字节一般为 0x05；</li></ul><p>以 P2PKH 为例，输出脚本的格式为</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>scriptPubKey: OP_DUP OP_HASH160 &lt;pubKeyHash&gt; OP_EQUALVERIFY OP_CHECKSIG\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中，OP_DUP 是复制栈顶元素；OP_HASH160 是计算 hash 值；OP_EQUALVERIFY 判 断栈顶两元素是否相等；OP_CHECKSIG 判断签名是否合法。这条指令实际上保证了只有 pubKey 的拥有者才能合法引用这个输出。</p><p>另外一个交易如果要花费这个输出，在引用这个输出的时候，需要提供认领脚本格式为</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>scriptSig: &lt;sig&gt; &lt;pubKey&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中， 是拿 pubKey 对应的私钥对交易（全部交易的输出、输入和脚本）hash 值进行签名， pubKey 的 hash 值需要等于 pubKeyHash。</p><p>进行交易验证时，会按照先 scriptSig 后 scriptPubKey 的顺序进行依次入栈处理，即完整指令 为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;sig&gt; &lt;pubKey&gt; OP_DUP OP_HASH160 &lt;pubKeyHash&gt; OP_EQUALVERIFY OP_CHECKSIG\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>读者可以按照栈的过程来进行计算，体会脚本的验证过程</p><p>引入脚本机制带来了灵活性，但也引入了更多的安全风险。比特币脚本支持的指令集十分简 单，基于栈的处理方式，并且非图灵完备，此外还添加了额外的一些限制（大小限制等）。</p><h4 id="区块" tabindex="-1"><a class="header-anchor" href="#区块" aria-hidden="true">#</a> 区块</h4><p>一个区块将主要包括如下内容：</p><p>4 字节的区块大小信息；</p><p>80 字节的区块头信息：</p><ul><li>版本号：4 字节；</li><li>上一个区块头的 SHA256 hash 值：链接到一个合法的块上，32 字节；</li><li>包含的所有验证过的交易的 Merkle 树根的哈希值，32 字节；</li><li>时间戳：4 字节；</li><li>难度指标：4 字节；</li><li>Nonce：4 字节，PoW 问题的答案；</li></ul><p>交易个数计数器：1~9 字节；</p><p>所有交易的具体内容，可变长。</p><h4 id="设计理念" tabindex="-1"><a class="header-anchor" href="#设计理念" aria-hidden="true">#</a> 设计理念</h4><p><strong>如何避免作恶</strong></p><p>基于经济博弈原理。在一个开放的网络中，无法通过技术手段保证每个人都是合作的。但可 以通过经济博弈来让合作者得到利益，让非合作者遭受损失和风险。</p><p>实际上，博弈论早已被广泛应用到众多领域</p><p>一个经典的例子是两个人来分一个蛋糕，如果都想拿到较大的一块，在没有第三方的前提 下，该怎么指定规则才公平？</p><p>最简单的一个方案是负责切蛋糕的人后选。</p><p>注：如果推广到 N 个人呢？</p><p>比特币网络需要所有试图参与者（矿工）都首先要付出挖矿的代价，进行算力消耗，越想拿 到新区块的决定权，意味着抵押的算力越多。一旦失败，这些算力都会被没收掉，成为沉没 成本。当网络中存在众多参与者时，个体试图拿到新区块决定权要付出的算力成本是巨大 的，意味着进行一次作恶付出的代价已经超过可能带来的好处。</p><h4 id="负反馈调节" tabindex="-1"><a class="header-anchor" href="#负反馈调节" aria-hidden="true">#</a> 负反馈调节</h4><p>比特币网络在设计上，很好的体现了负反馈的控制论基本原理。</p><p>比特币网络中矿工越多，系统就越稳定，比特币价值就越高，但挖到矿的概率会降低。</p><p>反之，网络中矿工减少，会让系统更容易导致被攻击，比特币价值越低，但挖到矿的概率会 提高。</p><p>因此，比特币的价格理论上应该稳定在一个合适的值（网络稳定性也会稳定在相应的值）， 这个价格乘以挖到矿的概率，恰好达到矿工的收益预期。</p><p>从长远角度看，硬件成本是下降的，但每个区块的比特币奖励每隔 4 年减半，最终将在 2140 年达到 2100 万枚，之后将完全依靠交易的服务费来鼓励矿工对网络的维护。</p>',38),_=["src"],x=(0,a.uE)('<h4 id="共识机制" tabindex="-1"><a class="header-anchor" href="#共识机制" aria-hidden="true">#</a> 共识机制</h4><p>传统的共识问题是考虑在一个相对封闭的体系中，存在好节点、坏节点，然后如何达成一 致。</p><p>对于比特币网络来说，因为它是开放的，网络质量也是完全无法保证的，导致问题更加复 杂，难以依靠传统的一致性算法来实现。</p><p>比特币网络对共识进行了一系列的放宽，同时对参与共识进行了一系列的限制。</p><p>首先是不实现最终共识，理论上现有达成的任何结果都可能被推翻，只是被推翻的可能性随 着时间而指数级的下降，要付出的代价迅速上升。</p><p>此外，达成共识的时间比较长，而且是按照块来进行阶段性的确认（快照），提高网络可用 性。</p><p>此外，通过进行 PoW 限制合法提案的个数，提高网络的稳定性。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>比特币网络系统中并没有特殊创新的技术，它有机的组合了如下领域的已有成 果：</p><ul><li>密码学</li><li>博弈论</li><li>记账技术</li><li>分布式系统</li><li>控制论</li></ul></div>',8),C={render:function(e,i){const l=(0,a.up)("RouterLink"),C=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[p,(0,a._)("nav",t,[(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(l,{to:"#定义"},{default:(0,a.w5)((()=>[r])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(l,{to:"#函数加密"},{default:(0,a.w5)((()=>[n])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(l,{to:"#零知识证明-zero-knowledge-validation"},{default:(0,a.w5)((()=>[h])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(l,{to:"#简介"},{default:(0,a.w5)((()=>[d])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(l,{to:"#历史"},{default:(0,a.w5)((()=>[s])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(l,{to:"#山寨币"},{default:(0,a.w5)((()=>[c])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(l,{to:"#原理和设计"},{default:(0,a.w5)((()=>[o])),_:1}),(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(l,{to:"#概念"},{default:(0,a.w5)((()=>[u])),_:1})])])])])]),b,(0,a._)("img",{src:e.$withBase("/images/algorithm/merkle.png"),alt:"merkle"},null,8,g),f,(0,a._)("p",null,[m,(0,a._)("a",P,[k,(0,a.Wm)(C)])]),A,(0,a._)("img",{src:e.$withBase("/images/algorithm/blockchain.png"),alt:"blockchain"},null,8,_),x],64)}}}}]);