"use strict";(self.webpackChunkyaomin=self.webpackChunkyaomin||[]).push([[1235],{8752:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-52f3aa33",path:"/soft/git.html",title:"Git",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"设置Git账户",slug:"设置git账户",children:[]},{level:2,title:"文本编辑器",slug:"文本编辑器",children:[]},{level:2,title:"将历史提交的某个commit作为终点分离出一个新的分支，或者将提交的内容cp到新分支上",slug:"将历史提交的某个commit作为终点分离出一个新的分支-或者将提交的内容cp到新分支上",children:[]},{level:2,title:"一、初始化项目仓库常用命令",slug:"一、初始化项目仓库常用命令",children:[]},{level:2,title:"二、开发者常用命令",slug:"二、开发者常用命令",children:[]},{level:2,title:"三、集中测试和发布阶段常用命令",slug:"三、集中测试和发布阶段常用命令",children:[]},{level:2,title:"四、切错分支修复方案，回滚（保留）",slug:"四、切错分支修复方案-回滚-保留",children:[{level:3,title:"未提交的情况下",slug:"未提交的情况下",children:[]},{level:3,title:"已提交到本地仓库的情况下",slug:"已提交到本地仓库的情况下",children:[]},{level:3,title:"回滚，拿出来重点讲下",slug:"回滚-拿出来重点讲下",children:[]},{level:3,title:"merge or rebase",slug:"merge-or-rebase",children:[]},{level:3,title:"git merge 回退",slug:"git-merge-回退",children:[]}]}],filePathRelative:"soft/git.md",git:{contributors:[{name:"Amin.Yao",email:"Amin.Yao@gaiaworks.cn",commits:9},{name:"yaomin",email:"272991874@qq.com",commits:2}]}}},9386:(n,s,a)=>{a.r(s),a.d(s,{default:()=>w});var e=a(6252);const l=(0,e._)("h1",{id:"git",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#git","aria-hidden":"true"},"#"),(0,e.Uk)(" Git")],-1),t={class:"table-of-contents"},i=(0,e.Uk)("设置Git账户"),p=(0,e.Uk)("文本编辑器"),c=(0,e.Uk)("将历史提交的某个commit作为终点分离出一个新的分支，或者将提交的内容cp到新分支上"),r=(0,e.Uk)("一、初始化项目仓库常用命令"),o=(0,e.Uk)("二、开发者常用命令"),m=(0,e.Uk)("三、集中测试和发布阶段常用命令"),u=(0,e.Uk)("四、切错分支修复方案，回滚（保留）"),b=(0,e.Uk)("未提交的情况下"),d=(0,e.Uk)("已提交到本地仓库的情况下"),g=(0,e.Uk)("回滚，拿出来重点讲下"),h=(0,e.Uk)("merge or rebase"),k=(0,e.Uk)("git merge 回退"),f={href:"https://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("git分支模型"),_=["src"],x=(0,e.uE)('<ul><li>master（长期）： 主分支, 保留发布版本，发布前记得打tag，方便回滚</li><li>develop（长期）： 开发分支, 保留所有历史版本</li><li>release： 存放预发布版本（v.1.0.0）</li><li>feature/功能名称： feature 功能分支, 功能开发</li><li>hotfix/功能名称： 热修复分支，处理线上紧急bug</li><li>bugfix/功能名称： bug修复分支, 处理release分支发现的bug</li></ul><h2 id="设置git账户" tabindex="-1"><a class="header-anchor" href="#设置git账户" aria-hidden="true">#</a> 设置Git账户</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config --global user.name <span class="token string">&quot;Amin.Yao&quot;</span> <span class="token comment">#--global全局设置，去掉可以设置单个项目，新账户保存在当前项目的.git/config文件</span>\n\n<span class="token function">git</span> config --global user.email Amin.Yao@xxxxxx.cn\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="文本编辑器" tabindex="-1"><a class="header-anchor" href="#文本编辑器" aria-hidden="true">#</a> 文本编辑器</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config --global core.editor emacs\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="将历史提交的某个commit作为终点分离出一个新的分支-或者将提交的内容cp到新分支上" tabindex="-1"><a class="header-anchor" href="#将历史提交的某个commit作为终点分离出一个新的分支-或者将提交的内容cp到新分支上" aria-hidden="true">#</a> 将历史提交的某个commit作为终点分离出一个新的分支，或者将提交的内容cp到新分支上</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout -b 新分支名 某次commitId\n\n例如:\n<span class="token function">git</span> checkout -b newAmin 2c2884cb   <span class="token comment"># 这样就创建了一个名字为newAmin最后一次提交的commitId为2c2884cb的新分支</span>\n\n使用 <span class="token function">git</span> cherry-pick commitId <span class="token comment"># 这会将指定的提交复制到当前分支上</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="一、初始化项目仓库常用命令" tabindex="-1"><a class="header-anchor" href="#一、初始化项目仓库常用命令" aria-hidden="true">#</a> 一、初始化项目仓库常用命令</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 查看分支</span>\n<span class="token function">git</span> branch \n<span class="token comment"># 切换分支</span>\n<span class="token function">git</span> checkout 分支名称\n<span class="token comment"># 创建并且切换分支</span>\n<span class="token function">git</span> checkout -b 分支名称\n\n\n<span class="token comment"># 本地新建仓库</span>\n<span class="token function">git</span> init\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token comment"># 添加到本地仓库</span>\n<span class="token function">git</span> commit -m <span class="token string">&#39;提交说明&#39;</span>\n<span class="token comment"># 新建本地develop</span>\n<span class="token function">git</span> checkout -b develop\n\n<span class="token comment"># 远程创建仓库创建项目将程序员拉到组里面</span>\n操作: 在gitlab服务器上在开发组中创建项目<span class="token punctuation">(</span>远程仓库<span class="token punctuation">)</span>\n\n<span class="token comment"># 关联本地项目和远程仓库</span>\n<span class="token function">git</span> remote <span class="token function">add</span> origin 远程仓库地址\n<span class="token comment"># 修改项目的远程仓库地址</span>\n<span class="token function">git</span> remote set-url origin 新的git远程仓库地址\n\n<span class="token comment"># 将本地所有的分支推送到远程-同名分支</span>\n<span class="token function">git</span> push -u origin --all\n<span class="token comment"># 将本地标签推送到远程</span>\n<span class="token function">git</span> push -u origin --tags\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="二、开发者常用命令" tabindex="-1"><a class="header-anchor" href="#二、开发者常用命令" aria-hidden="true">#</a> 二、开发者常用命令</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 克隆远程仓库的代码</span>\n<span class="token function">git</span> clone 远程仓库地址\n\n<span class="token comment"># 创建develop并且切换到该分支，最后关联到远程的develop</span>\n<span class="token function">git</span> checkout -b develop origin/develop\n<span class="token comment"># 从develop克隆出功能分支feature/amin</span>\n<span class="token function">git</span> checkout -b feature/amin\n<span class="token comment"># 接下来就可以在功能分支上开发代码了。。。</span>\n<span class="token string">&quot;&quot;</span>&quot;\nprint<span class="token punctuation">(</span><span class="token string">&quot;在这里写代码&quot;</span><span class="token punctuation">)</span>\n<span class="token string">&quot;&quot;</span>&quot;\n<span class="token comment"># 当前的feature/amin推送到远程feature/amin[自动新建]</span>\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>  添加对应文件\n<span class="token function">git</span> commit -m <span class="token string">&quot;提交说明&quot;</span>\n<span class="token function">git</span> push --set-upstream origin feature/amin_test\n操作: 发起合并请求\n\n<span class="token comment">#合并成功后，删除开发分支</span>\n<span class="token function">git</span> branch -d feature/amin   <span class="token comment"># 删除本地分支</span>\n<span class="token function">git</span> branch -dr origin/feature/amin <span class="token comment"># 删除远程分支（这步一般无需开发者操作）</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="三、集中测试和发布阶段常用命令" tabindex="-1"><a class="header-anchor" href="#三、集中测试和发布阶段常用命令" aria-hidden="true">#</a> 三、集中测试和发布阶段常用命令</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\n<span class="token comment"># ==========将feature/amin合并到develop分支==============</span>\n<span class="token function">git</span> checkout -b feature/amin\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token function">git</span> commit\n<span class="token function">git</span> checkout develop\n<span class="token function">git</span> merge feature/amin  <span class="token comment"># 将feature/amin合并到develop分支</span>\n<span class="token function">git</span> push <span class="token comment"># 推送</span>\n<span class="token function">git</span> log <span class="token comment"># 查看版本号</span>\n\n<span class="token comment"># ==========将feature/amin合并到master分支==============</span>\n<span class="token comment"># 切换到主分支</span>\n<span class="token function">git</span> checkout master \n<span class="token comment"># 拉取最新代码</span>\n<span class="token function">git</span> pull\n<span class="token comment"># 将指定的版本合并到当前[master]分支中</span>\n<span class="token function">git</span> merge dev\n<span class="token function">git</span> cherry-pick 版本号  \n<span class="token comment"># 推送</span>\n<span class="token function">git</span> push\n<span class="token comment"># 打标签</span>\n<span class="token function">git</span> tag -a <span class="token number">0.1</span> -m xxx\n<span class="token comment"># 推送所有标签</span>\n<span class="token function">git</span> push --tags\n\n<span class="token function">git</span> branch -d feature/amin   <span class="token comment"># 删除本地分支</span>\n<span class="token function">git</span> branch -dr origin/feature/amin <span class="token comment"># 删除远程分支</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="四、切错分支修复方案-回滚-保留" tabindex="-1"><a class="header-anchor" href="#四、切错分支修复方案-回滚-保留" aria-hidden="true">#</a> 四、切错分支修复方案，回滚（保留）</h2><h3 id="未提交的情况下" tabindex="-1"><a class="header-anchor" href="#未提交的情况下" aria-hidden="true">#</a> 未提交的情况下</h3><div class="custom-container tip"><p class="custom-container-title">未提交</p><p>git add . (把所有改动暂存)</p><p>git stash (把暂存的文件提交到git的暂存栈)</p><p>git checkout 本该提交代码的分支</p><p>git stash pop (将暂存栈中的代码放出来)</p><p>至于是继续改还是提交就随你了</p></div><h3 id="已提交到本地仓库的情况下" tabindex="-1"><a class="header-anchor" href="#已提交到本地仓库的情况下" aria-hidden="true">#</a> 已提交到本地仓库的情况下</h3><div class="custom-container tip"><p class="custom-container-title">已提交</p><p>git checkout 不该提交代码提交了代码的分支</p><p>git reset HEAD~1 （这个命令会将 HEAD 指针移动到指定的提交，1代表最近一次提交放回暂存区, 并取消此次提交，2代表最近两次提交，根据自己的提交次数填写）</p><p>git stash (把暂存的文件提交到git的暂存栈)</p><p>git checkout 该提交代码的分支</p><p>git stash pop</p><p>等你把代码提交到了正确的分支后，再次切到刚刚错的分支</p><p>git push origin 错误的分支 -f (把不该上去的文件回退掉)</p></div><h3 id="回滚-拿出来重点讲下" tabindex="-1"><a class="header-anchor" href="#回滚-拿出来重点讲下" aria-hidden="true">#</a> 回滚，拿出来重点讲下</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token string">&quot;HEAD^&quot;</span> <span class="token comment">#回退到最近一次，工作区修改保留</span>\n\n<span class="token function">git</span> reset HEAD~1 <span class="token comment"># 这个命令会将 HEAD 指针移动到指定的提交，1代表最近一次提交放回暂存区, 并取消此次提交，2代表最近两次提交，根据自己的提交次数填写</span>\n\n<span class="token function">git</span> reset --hard HEAD~1  <span class="token comment">#暂存区的修改和工作区的后面的修改，全都不保留，所以慎用 --hard</span>\n\n<span class="token function">git</span> reset  版本号\n\n<span class="token function">git</span> reset  --hard 版本号\n\n<span class="token function">git</span> reset --hard HEAD <span class="token comment">#回退到头结点，丢弃所有改动</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="merge-or-rebase" tabindex="-1"><a class="header-anchor" href="#merge-or-rebase" aria-hidden="true">#</a> merge or rebase</h3><ul><li>区别： 1、rebase把当前的commit放到公共分支的最后面，merge把当前的commit和公共分支合并在一起。 rebase会把当前分支的 commit 放到公共分支的最后面,所以叫变基。就好像从公共分支又重新拉出来这个分支一样。</li></ul><p>举例:</p><p>如果从 master 拉个feature分支出来,然后提交了几个 commit,这个时候刚好有人把他开发的东西合并到 master 了,这个时候 master 就比你拉分支的时候多了几个 commit, 如果这个时候你 rebase master 的话，就会把你当前的几个 commit，放到那个人 commit 的后面。</p><p>2、用merge命令解决完冲突后会产生一个commit，而用rebase命令解决完冲突后不会产生额外的commit。 merge会把公共分支和你当前的commit 合并在一起，形成一个新的 commit 提交</p><ul><li>优点和缺点：</li></ul><p>（一股脑）使用merge命令合并分支，解决完冲突，执行git add .和git commit -m&#39;fix conflict&#39;。这个时候会产生一个commit。</p><p>（交互式）使用rebase命令合并分支，解决完冲突，执行git add .和git rebase --continue，不会产生额外的commit。 这样的好处是，‘干净’，分支上不会有无意义的解决分支的commit；坏处，如果合并的分支中存在多个commit，需要重复处理多次冲突。</p><ul><li>git pull和git pull --rebase区别：</li></ul><p>git pull做了两个操作分别是‘获取’和合并。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</p><h3 id="git-merge-回退" tabindex="-1"><a class="header-anchor" href="#git-merge-回退" aria-hidden="true">#</a> git merge 回退</h3><h4 id="_1-未commit-未push" tabindex="-1"><a class="header-anchor" href="#_1-未commit-未push" aria-hidden="true">#</a> 1.未commit,未push</h4><h5 id="方式1-利用idea-的可视化操作-rollback" tabindex="-1"><a class="header-anchor" href="#方式1-利用idea-的可视化操作-rollback" aria-hidden="true">#</a> 方式1： 利用idea 的可视化操作 rollback</h5><ul><li><p>方式2：idea切换到其他分支，再切回来会提示这个分支有东西没有commit,让你选择commit还是drop commit，选择删除就行了</p></li><li><p>方式3：git reset --hard HEAD 回退到头结点，丢弃所有改动</p></li></ul><h5 id="_2-已提交-未push" tabindex="-1"><a class="header-anchor" href="#_2-已提交-未push" aria-hidden="true">#</a> 2.已提交，未push</h5><p>此时只需要改本地分支上的提交就行了</p><ul><li><p>方式1： git reset --head &quot;HEAD^&quot;</p></li><li><p>方式2： git revert # 这个命令会创建一个新的提交，这个新的提交会撤销指定的提交。</p></li><li><p>方式3： git rebase # 如果你想彻底从你的提交历史中删除一些内容。但是这个命令比较复杂，并且可能会对你的提交历史造成不可逆的影响。请在使用 git rebase 命令之前详细阅读相关的文档</p></li></ul><h5 id="_3-已提交-已push" tabindex="-1"><a class="header-anchor" href="#_3-已提交-已push" aria-hidden="true">#</a> 3.已提交，已push</h5><ul><li>方式1：</li></ul><p>git log 查看提交记录,选择回退到的commitId</p><p>git reset --hard *******(*是commitId)</p><p>git reset回退干脆利落，但是会丢失提交记录，比如你回退test分支，此时刚好有人提交东西到test,回造成他人代码丢失（严重）</p><p>git reset执行完成push到远程需要强制推送</p><p>git push --force orign</p><ul><li>方式2：</li></ul><p>git revert *******(*是commitId)</p><p>git revert回滚会保留旧的提交记录，生成一条回退记录，是不错的选择，但是在多分支并行开发的模式下会导致有些commit和并不到目标分支上</p><p>例如 feature/amin test master三个分支</p><p>feature/amin合并到test,然后git revert</p><p>test 合并到master,然后feature/amin合并到master上你会发现合并不了</p>',50),w={render:function(n,s){const a=(0,e.up)("RouterLink"),w=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,(0,e._)("nav",t,[(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#设置git账户"},{default:(0,e.w5)((()=>[i])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#文本编辑器"},{default:(0,e.w5)((()=>[p])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#将历史提交的某个commit作为终点分离出一个新的分支-或者将提交的内容cp到新分支上"},{default:(0,e.w5)((()=>[c])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#一、初始化项目仓库常用命令"},{default:(0,e.w5)((()=>[r])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#二、开发者常用命令"},{default:(0,e.w5)((()=>[o])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#三、集中测试和发布阶段常用命令"},{default:(0,e.w5)((()=>[m])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#四、切错分支修复方案-回滚-保留"},{default:(0,e.w5)((()=>[u])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#未提交的情况下"},{default:(0,e.w5)((()=>[b])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#已提交到本地仓库的情况下"},{default:(0,e.w5)((()=>[d])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#回滚-拿出来重点讲下"},{default:(0,e.w5)((()=>[g])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#merge-or-rebase"},{default:(0,e.w5)((()=>[h])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#git-merge-回退"},{default:(0,e.w5)((()=>[k])),_:1})])])])])]),(0,e._)("p",null,[(0,e._)("a",f,[v,(0,e.Wm)(w)])]),(0,e._)("img",{src:n.$withBase("/images/soft/git20210915.png"),alt:"git"},null,8,_),x],64)}}}}]);