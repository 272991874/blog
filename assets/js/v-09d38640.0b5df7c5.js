"use strict";(self.webpackChunkyaomin=self.webpackChunkyaomin||[]).push([[254],{4987:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-09d38640",path:"/dataStructure/linear_list_seq.html",title:"顺序表",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是顺序表？",slug:"什么是顺序表",children:[]},{level:2,title:"顺序表的初始化",slug:"顺序表的初始化",children:[]},{level:2,title:"顺序表插入元素",slug:"顺序表插入元素",children:[]},{level:2,title:"顺序表删除元素",slug:"顺序表删除元素",children:[]},{level:2,title:"顺序表查找元素",slug:"顺序表查找元素",children:[]},{level:2,title:"顺序表更改元素",slug:"顺序表更改元素",children:[]}],filePathRelative:"dataStructure/linear_list_seq.md",git:{contributors:[{name:"yaomin",email:"272991874@qq.com",commits:1}]}}},9191:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(6252);const l=(0,e._)("h1",{id:"顺序表",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#顺序表","aria-hidden":"true"},"#"),(0,e.Uk)(" 顺序表")],-1),i={class:"table-of-contents"},r=(0,e.Uk)("什么是顺序表？"),t=(0,e.Uk)("顺序表的初始化"),p=(0,e.Uk)("顺序表插入元素"),b=(0,e.Uk)("顺序表删除元素"),u=(0,e.Uk)("顺序表查找元素"),c=(0,e.Uk)("顺序表更改元素"),m=(0,e._)("h2",{id:"什么是顺序表",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#什么是顺序表","aria-hidden":"true"},"#"),(0,e.Uk)(" 什么是顺序表？")],-1),d=(0,e._)("blockquote",null,[(0,e._)("p",null,"顺序表，全名顺序存储结构，是线性表的一种。通过《什么是线性表》一节的学习我们知道，线性表用于存储逻辑关系为“一对一”的数据，顺序表自然也不例外。")],-1),o=(0,e._)("p",null,"不仅如此，顺序表对数据的物理存储结构也有要求。顺序表存储数据时，会提前申请一整块足够大小的物理空间，然后将数据依次存储起来，存储时做到数据元素之间不留一丝缝隙。",-1),h=(0,e._)("p",null,"例如，使用顺序表存储集合 {1,2,3,4,5}，数据最终的存储状态如图 1 所示：",-1),f=["src"],_=(0,e.uE)('<p>图 1 顺序存储结构示意图</p><p>由此我们可以得出，将“具有 &#39;一对一&#39; 逻辑关系的数据按照次序连续存储到一整块物理空间上”的存储结构就是顺序存储结构。</p><p>通过观察图 1 中数据的存储状态，我们可以发现，顺序表存储数据同数组非常接近。其实，顺序表存储数据使用的就是数组。</p><h2 id="顺序表的初始化" tabindex="-1"><a class="header-anchor" href="#顺序表的初始化" aria-hidden="true">#</a> 顺序表的初始化</h2><blockquote><p>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</p><ol><li>顺序表申请的存储容量；</li><li>顺序表的长度，也就是表中存储数据元素的个数；</li></ol></blockquote><ul><li>提示：正常状态下，顺序表申请的存储容量要大于顺序表的长度。</li></ul><h2 id="顺序表插入元素" tabindex="-1"><a class="header-anchor" href="#顺序表插入元素" aria-hidden="true">#</a> 顺序表插入元素</h2><blockquote><p>向已有顺序表中插入数据元素，根据插入位置的不同，可分为以下 3 种情况：</p><ol><li>插入到顺序表的表头；</li><li>在表的中间位置插入元素；</li><li>尾随顺序表中已有元素，作为顺序表中的最后一个元素；</li></ol></blockquote><blockquote><p>虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过遍历，找到数据元素要插入的位置，然后做如下两步工作：</p><ol><li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li><li>将元素放到腾出来的位置上；</li></ol></blockquote>',9),q=["src"],g=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">注意，动态数组额外申请更多物理空间使用的是 realloc 函数。</p><p>并且，在实现后续元素整体后移的过程，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。</p></div><h2 id="顺序表删除元素" tabindex="-1"><a class="header-anchor" href="#顺序表删除元素" aria-hidden="true">#</a> 顺序表删除元素</h2><div class="custom-container tip"><p class="custom-container-title">从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。</p><p>后续元素整体前移一个位置，会直接将目标元素删除，可间接实现删除元素的目的。</p></div><h2 id="顺序表查找元素" tabindex="-1"><a class="header-anchor" href="#顺序表查找元素" aria-hidden="true">#</a> 顺序表查找元素</h2><div class="custom-container tip"><p class="custom-container-title">顺序表中查找目标元素，可以使用多种查找算法实现，比如说二分查找算法、插值查找算法等。</p></div><h2 id="顺序表更改元素" tabindex="-1"><a class="header-anchor" href="#顺序表更改元素" aria-hidden="true">#</a> 顺序表更改元素</h2><div class="custom-container tip"><p class="custom-container-title">顺序表更改元素的实现过程是：</p><ol><li>找到目标元素；</li><li>直接修改该元素的值；</li></ol></div><p>C 语言操作顺序表的实现代码为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#define Size 5\ntypedef struct Table{\n    int * head;\n    int length;\n    int size;\n}table;\ntable initTable(){\n    table t;\n    t.head=(int*)malloc(Size*sizeof(int));\n    if (!t.head)\n    {\n        printf(&quot;初始化失败\\n&quot;);\n        exit(0);\n    }\n    t.length=0;\n    t.size=Size;\n    return t;\n}\ntable addTable(table t,int elem,int add)\n{\n    if (add&gt;t.length+1||add&lt;1) {\n        printf(&quot;插入位置有问题\\n&quot;);\n        return t;\n    }\n    if (t.length&gt;=t.size) {\n        t.head=(int *)realloc(t.head, (t.size+1)*sizeof(int));\n        if (!t.head) {\n            printf(&quot;存储分配失败\\n&quot;);\n        }\n        t.size+=1;\n    }\n    for (int i=t.length-1; i&gt;=add-1; i--) {\n        t.head[i+1]=t.head[i];\n    }\n    t.head[add-1]=elem;\n    t.length++;\n    return t;\n}\ntable delTable(table t,int add){\n    if (add&gt;t.length || add&lt;1) {\n        printf(&quot;被删除元素的位置有误\\n&quot;);\n        return t;\n    }\n    for (int i=add; i&lt;t.length; i++) {\n        t.head[i-1]=t.head[i];\n    }\n    t.length--;\n    return t;\n}\nint selectTable(table t,int elem){\n    for (int i=0; i&lt;t.length; i++) {\n        if (t.head[i]==elem) {\n            return i+1;\n        }\n    }\n    return -1;\n}\ntable amendTable(table t,int elem,int newElem){\n    int add=selectTable(t, elem);\n    t.head[add-1]=newElem;\n    return t;\n}\nvoid displayTable(table t){\n    for (int i=0;i&lt;t.length;i++) {\n        printf(&quot;%d &quot;,t.head[i]);\n    }\n    printf(&quot;\\n&quot;);\n}\nint main(){\n    table t1=initTable();\n    for (int i=1; i&lt;=Size; i++) {\n        t1.head[i-1]=i;\n        t1.length++;\n    }\n    printf(&quot;原顺序表：\\n&quot;);\n    displayTable(t1);\n  \n    printf(&quot;删除元素1:\\n&quot;);\n    t1=delTable(t1, 1);\n    displayTable(t1);\n  \n    printf(&quot;在第2的位置插入元素5:\\n&quot;);\n    t1=addTable(t1, 5, 2);\n    displayTable(t1);\n  \n    printf(&quot;查找元素3的位置:\\n&quot;);\n    int add=selectTable(t1, 3);\n    printf(&quot;%d\\n&quot;,add);\n  \n    printf(&quot;将元素3改为6:\\n&quot;);\n    t1=amendTable(t1, 3, 6);\n    displayTable(t1);\n    return 0;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br></div></div>',9),v=(0,e.Uk)("首页"),k={render:function(n,s){const a=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,(0,e._)("nav",i,[(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#什么是顺序表"},{default:(0,e.w5)((()=>[r])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#顺序表的初始化"},{default:(0,e.w5)((()=>[t])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#顺序表插入元素"},{default:(0,e.w5)((()=>[p])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#顺序表删除元素"},{default:(0,e.w5)((()=>[b])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#顺序表查找元素"},{default:(0,e.w5)((()=>[u])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#顺序表更改元素"},{default:(0,e.w5)((()=>[c])),_:1})])])]),m,d,o,h,(0,e._)("img",{src:n.$withBase("/images/dataStructure/linear_list_seq_1.png"),alt:"linear_list_seq_1"},null,8,f),_,(0,e._)("img",{src:n.$withBase("/images/dataStructure/linear_list_seq_2.png"),alt:"linear_list_seq_2.png"},null,8,q),g,(0,e._)("p",null,[(0,e.Wm)(a,{to:"/"},{default:(0,e.w5)((()=>[v])),_:1})])],64)}}}}]);