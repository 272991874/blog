"use strict";(self.webpackChunkyaomin=self.webpackChunkyaomin||[]).push([[9314],{9411:(e,a,r)=>{r.r(a),r.d(a,{data:()=>i});const i={key:"v-7065ffef",path:"/programming/",title:"编程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"声明式编程",slug:"声明式编程",children:[]},{level:2,title:"命令式编程",slug:"命令式编程",children:[]},{level:2,title:"函数式编程",slug:"函数式编程",children:[]}],filePathRelative:"programming/README.md",git:{contributors:[{name:"Amin.Yao",email:"Amin.Yao@gaiaworks.cn",commits:1}]}}},4442:(e,a,r)=>{r.r(a),r.d(a,{default:()=>h});const i=(0,r(6252).uE)('<h1 id="编程" tabindex="-1"><a class="header-anchor" href="#编程" aria-hidden="true">#</a> 编程</h1><h2 id="声明式编程" tabindex="-1"><a class="header-anchor" href="#声明式编程" aria-hidden="true">#</a> 声明式编程</h2><p>通过表达式直接告诉计算机我们要的结果，具体操作由底层实现，我们并不关心， 如sql，html，spring spel。</p><h2 id="命令式编程" tabindex="-1"><a class="header-anchor" href="#命令式编程" aria-hidden="true">#</a> 命令式编程</h2><p>一步一步告诉计算机先做什么再做什么。我们平时编写java，c等代码就是命令式编程。</p><h2 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程" aria-hidden="true">#</a> 函数式编程</h2><p>就是将函数当做一个数据类型，函数作为参数，返回值，属性。 Java不支持该模式，通过匿名类实现，如forEach方法。</p>',7),h={render:function(e,a){return i}}}}]);