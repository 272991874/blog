{"version":3,"file":"8154.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AAC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","sources":["webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_thread_base.html.js","webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_thread_base.html.vue","webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_thread_base.html.vue?377c","webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_thread_base.html.vue?ab86"],"sourcesContent":["export const data = {\n  \"key\": \"v-50cfdebc\",\n  \"path\": \"/java/java_thread_base.html\",\n  \"title\": \"多线程\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {\n    \"title\": \"多线程\",\n    \"sidebar\": \"auto\",\n    \"sidebarDepth\": 2\n  },\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"什么是进程？\",\n      \"slug\": \"什么是进程\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是线程？\",\n      \"slug\": \"什么是线程\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"线程的实现方式？\",\n      \"slug\": \"线程的实现方式\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"线程的状态？\",\n      \"slug\": \"线程的状态\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"run方法和start方法的区别？\",\n      \"slug\": \"run方法和start方法的区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"获取当前线程的名字？\",\n      \"slug\": \"获取当前线程的名字\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"判断线程是否存活？\",\n      \"slug\": \"判断线程是否存活\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"sleep()方法的作用？\",\n      \"slug\": \"sleep-方法的作用\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"线程的种类\",\n      \"slug\": \"线程的种类\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是synchronized？\",\n      \"slug\": \"什么是synchronized\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"线程的基本方法\",\n      \"slug\": \"线程的基本方法\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"怎么检测一个线程是否拥有锁？\",\n      \"slug\": \"怎么检测一个线程是否拥有锁\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"volatile 变量和 atomic 变量有什么不同？\",\n      \"slug\": \"volatile-变量和-atomic-变量有什么不同\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"为什么线程通信的方法 wait(), notify()和 notifyAll()被定义在 Object 类里？\",\n      \"slug\": \"为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"并发编程三要素？\",\n      \"slug\": \"并发编程三要素\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Executors 类是什么？\",\n      \"slug\": \"executors-类是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"如何优雅的设置睡眠时间\",\n      \"slug\": \"如何优雅的设置睡眠时间\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"如何停止一个线程\",\n      \"slug\": \"如何停止一个线程\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"yield()方法和join()的作用\",\n      \"slug\": \"yield-方法和join-的作用\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"线程的优先级\",\n      \"slug\": \"线程的优先级\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Java虚拟机退出时Daemon线程中的finally块一定会执行吗?\",\n      \"slug\": \"java虚拟机退出时daemon线程中的finally块一定会执行吗\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"设置线程上下文类加载器\",\n      \"slug\": \"设置线程上下文类加载器\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是原子操作？\",\n      \"slug\": \"什么是原子操作\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"并发和并行\",\n      \"slug\": \"并发和并行\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是多线程中的上下文切换？\",\n      \"slug\": \"什么是多线程中的上下文切换\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"死锁与活锁的区别，死锁与饥饿的区别？\",\n      \"slug\": \"死锁与活锁的区别-死锁与饥饿的区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Java 中用到的线程调度算法是什么？\",\n      \"slug\": \"java-中用到的线程调度算法是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Java后台线程\",\n      \"slug\": \"java后台线程\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"ThreadLocal 作用（线程本地存储）\",\n      \"slug\": \"threadlocal-作用-线程本地存储\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Runnable 和 Callable 的区别\",\n      \"slug\": \"runnable-和-callable-的区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是 Future？\",\n      \"slug\": \"什么是-future\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"写一个Callable案例\",\n      \"slug\": \"写一个callable案例\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"synchronized底层的两个jvm指令\",\n      \"slug\": \"synchronized底层的两个jvm指令\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"java对象头\",\n      \"slug\": \"java对象头\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"什么是CAS\",\n      \"slug\": \"什么是cas\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"UnSafe类（jdk.internal.misc.UnSafe）\",\n      \"slug\": \"unsafe类-jdk-internal-misc-unsafe\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/java_thread_base.md\",\n  \"git\": {\n    \"contributors\": [\n      {\n        \"name\": \"yaomin\",\n        \"email\": \"272991874@qq.com\",\n        \"commits\": 2\n      }\n    ]\n  }\n}\n","<h1 id=\"多线程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#多线程\" aria-hidden=\"true\">#</a> 多线程</h1>\n<nav class=\"table-of-contents\"><ul><li><RouterLink to=\"#什么是进程\">什么是进程？</RouterLink></li><li><RouterLink to=\"#什么是线程\">什么是线程？</RouterLink></li><li><RouterLink to=\"#线程的实现方式\">线程的实现方式？</RouterLink></li><li><RouterLink to=\"#线程的状态\">线程的状态？</RouterLink></li><li><RouterLink to=\"#run方法和start方法的区别\">run方法和start方法的区别？</RouterLink></li><li><RouterLink to=\"#获取当前线程的名字\">获取当前线程的名字？</RouterLink></li><li><RouterLink to=\"#判断线程是否存活\">判断线程是否存活？</RouterLink></li><li><RouterLink to=\"#sleep-方法的作用\">sleep()方法的作用？</RouterLink></li><li><RouterLink to=\"#线程的种类\">线程的种类</RouterLink></li><li><RouterLink to=\"#什么是synchronized\">什么是synchronized？</RouterLink></li><li><RouterLink to=\"#线程的基本方法\">线程的基本方法</RouterLink></li><li><RouterLink to=\"#怎么检测一个线程是否拥有锁\">怎么检测一个线程是否拥有锁？</RouterLink></li><li><RouterLink to=\"#volatile-变量和-atomic-变量有什么不同\">volatile 变量和 atomic 变量有什么不同？</RouterLink></li><li><RouterLink to=\"#为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里\">为什么线程通信的方法 wait(), notify()和 notifyAll()被定义在 Object 类里？</RouterLink></li><li><RouterLink to=\"#并发编程三要素\">并发编程三要素？</RouterLink></li><li><RouterLink to=\"#executors-类是什么\">Executors 类是什么？</RouterLink></li><li><RouterLink to=\"#如何优雅的设置睡眠时间\">如何优雅的设置睡眠时间</RouterLink></li><li><RouterLink to=\"#如何停止一个线程\">如何停止一个线程</RouterLink></li><li><RouterLink to=\"#yield-方法和join-的作用\">yield()方法和join()的作用</RouterLink></li><li><RouterLink to=\"#线程的优先级\">线程的优先级</RouterLink></li><li><RouterLink to=\"#java虚拟机退出时daemon线程中的finally块一定会执行吗\">Java虚拟机退出时Daemon线程中的finally块一定会执行吗?</RouterLink></li><li><RouterLink to=\"#设置线程上下文类加载器\">设置线程上下文类加载器</RouterLink></li><li><RouterLink to=\"#什么是原子操作\">什么是原子操作？</RouterLink></li><li><RouterLink to=\"#并发和并行\">并发和并行</RouterLink></li><li><RouterLink to=\"#什么是多线程中的上下文切换\">什么是多线程中的上下文切换？</RouterLink></li><li><RouterLink to=\"#死锁与活锁的区别-死锁与饥饿的区别\">死锁与活锁的区别，死锁与饥饿的区别？</RouterLink></li><li><RouterLink to=\"#java-中用到的线程调度算法是什么\">Java 中用到的线程调度算法是什么？</RouterLink></li><li><RouterLink to=\"#java后台线程\">Java后台线程</RouterLink></li><li><RouterLink to=\"#threadlocal-作用-线程本地存储\">ThreadLocal 作用（线程本地存储）</RouterLink></li><li><RouterLink to=\"#runnable-和-callable-的区别\">Runnable 和 Callable 的区别</RouterLink></li><li><RouterLink to=\"#什么是-future\">什么是 Future？</RouterLink></li><li><RouterLink to=\"#写一个callable案例\">写一个Callable案例</RouterLink></li><li><RouterLink to=\"#synchronized底层的两个jvm指令\">synchronized底层的两个jvm指令</RouterLink></li><li><RouterLink to=\"#java对象头\">java对象头</RouterLink></li><li><RouterLink to=\"#什么是cas\">什么是CAS</RouterLink></li><li><RouterLink to=\"#unsafe类-jdk-internal-misc-unsafe\">UnSafe类（jdk.internal.misc.UnSafe）</RouterLink></li></ul></nav>\n<h2 id=\"什么是进程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是进程\" aria-hidden=\"true\">#</a> 什么是进程？</h2>\n<blockquote>\n<p>进程是系统中正在运行的一个程序，程序一旦运行就是进程。</p>\n</blockquote>\n<blockquote>\n<p>进程可以看成程序执行的一个实例。进程是系统资源分配的独立实体，每个进程都拥有独立的地址空间一个进程无法访问另一个进程的变量和数据结构，如果想让一个进程访问另一个进程的资源，需要使用进程间通信，比如管道，文件，套接字等。</p>\n</blockquote>\n<h2 id=\"什么是线程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是线程\" aria-hidden=\"true\">#</a> 什么是线程？</h2>\n<blockquote>\n<p>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中-一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>\n</blockquote>\n<h2 id=\"线程的实现方式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#线程的实现方式\" aria-hidden=\"true\">#</a> 线程的实现方式？</h2>\n<ol>\n<li>继承Thread类</li>\n<li>实现runnable接口</li>\n<li>实现callable接口</li>\n<li>线程池</li>\n</ol>\n<h2 id=\"线程的状态\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#线程的状态\" aria-hidden=\"true\">#</a> 线程的状态？</h2>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n    NEW<span class=\"token punctuation\">,</span>\n    RUNNABLE<span class=\"token punctuation\">,</span>\n    BLOCKED<span class=\"token punctuation\">,</span>\n    WAITING<span class=\"token punctuation\">,</span>\n    TIMED_WAITING<span class=\"token punctuation\">,</span>  \n    TERMINATED<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div></div><ul>\n<li>NEW状态：new创建一个Thread对象时， 并没处于执行状态，因为没有调用start方法启动改线程，那么此时的状态就是新建状态。</li>\n<li>RUNNABLE状态：线程对象通过start方法进入runnable状态，启动的线程不一定会立即得到执行，线程的运行与否要看cpu的调度，我们把这个中间状态叫可执行状态(RUNNABLE)。</li>\n<li>RUNNING状态：一旦cpu通过轮询或其他方式从任务可以执行队列中选中了线程，此时它才能真正的执行自己的逻辑代码。</li>\n<li>BLOCKED状态：处于这种状态的线程不会被分配CPU执行时间，它们要等待被显式地唤醒，否则会处于无限期等待的状态。</li>\n<li>TIMED_WAITING状态：处于这种状态的线程不会被分配CPU执行时间，不过无须无限期等待被其他线程显示地唤醒，在达到一定时间后它们会自动唤醒。</li>\n<li>TERMINATED状态：当线程的run()方法完成时，或者主线程的main()方法完成时，我们就认为它终止了。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦终止了，就不能复生。</li>\n</ul>\n<h2 id=\"run方法和start方法的区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#run方法和start方法的区别\" aria-hidden=\"true\">#</a> run方法和start方法的区别？</h2>\n<blockquote>\n<p>start ()方法来启动线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码;通过调用Thread类的star()方法来启动一个线程，这时此线程是处于就绪状态，并没有运行。然后通过此Thread类调用方法run()来完成其运行操作的，这里方法run()称为线程体，它包含了要执行的这个线程的内容，Run方 法运行结束，此线程终止。然后CPU再调度其它线程。</p>\n</blockquote>\n<blockquote>\n<p>run () 方法当作普通方法的方式调用。程序还是要顺序执行，要等待run方法体执行完毕后，才可继续执行下面的代码;程序中只有主线程一这 一个线程，其程序执行路径还是只有一条，这样就没有达到多线程的目的。</p>\n</blockquote>\n<h2 id=\"获取当前线程的名字\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#获取当前线程的名字\" aria-hidden=\"true\">#</a> 获取当前线程的名字？</h2>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><h2 id=\"判断线程是否存活\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#判断线程是否存活\" aria-hidden=\"true\">#</a> 判断线程是否存活？</h2>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code>线程<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><h2 id=\"sleep-方法的作用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sleep-方法的作用\" aria-hidden=\"true\">#</a> sleep()方法的作用？</h2>\n<ul>\n<li>方法sleep()的作用是在指定的毫秒数内让当前的“正在执行的线程”休眠(暂停执行)。</li>\n</ul>\n<h2 id=\"线程的种类\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#线程的种类\" aria-hidden=\"true\">#</a> 线程的种类</h2>\n<blockquote>\n<p>java中线程分为用户线程和守护线程（GC就是一个守护线程）</p>\n</blockquote>\n<blockquote>\n<p>守护线程的特点：守护线程是一个比较特殊的线程，主要被用做程序中后台调度以及支持性工作。当Java虚拟机中不存在非守护线程时，守护线程才会随着JVM一同结束工作。</p>\n</blockquote>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token comment\">// 设置为守护线程</span>\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token class-name\">Daemon</span>属性需要再启动线程之前设置，不能再启动后设置。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><h2 id=\"什么是synchronized\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是synchronized\" aria-hidden=\"true\">#</a> 什么是synchronized？</h2>\n<blockquote>\n<p>synchronized是java中的一个关键字可以用来修饰方法和变量来保证线程的同步。</p>\n</blockquote>\n<ul>\n<li>普通同步方法一&gt; 锁的是当前实例对象。</li>\n<li>静态同步方法一&gt;锁的是当前类的Class对象。</li>\n<li>同步方法块一&gt;锁的是synchonized括号里配置的对象。</li>\n</ul>\n<h2 id=\"线程的基本方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#线程的基本方法\" aria-hidden=\"true\">#</a> 线程的基本方法</h2>\n<blockquote>\n<p>线程相关的基本方法有 wait，notify，notifyAll，sleep，join，yield 等。</p>\n</blockquote>\n<img :src=\"$withBase('/images/java/java_thread_method.png')\" alt=\"java_thread_method\">\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sleep()</td>\n<td>强迫一个线程睡眠Ｎ毫秒。</td>\n</tr>\n<tr>\n<td>isAlive()</td>\n<td>判断一个线程是否存活。</td>\n</tr>\n<tr>\n<td>join()</td>\n<td>等待线程终止。</td>\n</tr>\n<tr>\n<td>activeCount()</td>\n<td>程序中活跃的线程数。</td>\n</tr>\n<tr>\n<td>enumerate()</td>\n<td>枚举程序中的线程。</td>\n</tr>\n<tr>\n<td>currentThread()</td>\n<td>得到当前线程。</td>\n</tr>\n<tr>\n<td>isDaemon()</td>\n<td>一个线程是否为守护线程。</td>\n</tr>\n<tr>\n<td>setDaemon()</td>\n<td>设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束)</td>\n</tr>\n<tr>\n<td>setName()</td>\n<td>为线程设置一个名称。</td>\n</tr>\n<tr>\n<td>wait()</td>\n<td>强迫一个线程等待。</td>\n</tr>\n<tr>\n<td>notify()</td>\n<td>通知一个线程继续运行。</td>\n</tr>\n<tr>\n<td>setPriority()</td>\n<td>设置一个线程的优先级。</td>\n</tr>\n<tr>\n<td>getPriority()</td>\n<td>获得一个线程的优先级。</td>\n</tr>\n<tr>\n<td>yieid()</td>\n<td>yield 会使当前线程让出 CPU 执行时间片，与其他线程一起重新竞争 CPU 时间片。</td>\n</tr>\n</tbody>\n</table>\n<p>##为什么 wait 和 notify 方法要在同步块中调用？</p>\n<p>Java API 强制要求这样做，如果你不这么做，你的代码会抛出</p>\n<blockquote>\n<p>IllegalMonitorStateException 异常。还有一个原因是为了避免 wait 和 notify之间产生竞态条件。</p>\n</blockquote>\n<blockquote>\n<p>当一个线程需要调用对象的 wait()方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的 notify()方法。同样的，当一个线程需要调用对象的 notify()方法时，它会释放这个对象的锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者同步块中被调用。</p>\n</blockquote>\n<h2 id=\"怎么检测一个线程是否拥有锁\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#怎么检测一个线程是否拥有锁\" aria-hidden=\"true\">#</a> 怎么检测一个线程是否拥有锁？</h2>\n<blockquote>\n<p>在 java.lang.Thread 中有一个方法叫 holdsLock()，它返回 true 如果当且仅当当前线程拥有某个具体对象的锁。</p>\n</blockquote>\n<h2 id=\"volatile-变量和-atomic-变量有什么不同\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#volatile-变量和-atomic-变量有什么不同\" aria-hidden=\"true\">#</a> volatile 变量和 atomic 变量有什么不同？</h2>\n<blockquote>\n<p>Volatile 变量可以确保先行关系，即写操作会发生在后续的读操作之前, 但它并不能保证原子性。例如用 volatile 修饰 count 变量那么 count++ 操作就不是原子性的。</p>\n</blockquote>\n<blockquote>\n<p>而 AtomicInteger 类提供的 atomic 方法可以让这种操作具有原子性如getAndIncrement()方法会原子性的进行增量操作把当前值加一，其它数据类型和引用变量也可以进行相似操作。</p>\n</blockquote>\n<h2 id=\"为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里\" aria-hidden=\"true\">#</a> 为什么线程通信的方法 wait(), notify()和 notifyAll()被定义在 Object 类里？</h2>\n<blockquote>\n<p>Java 的每个对象中都有一个锁(monitor，也可以成为监视器) 并且 wait()，notify()等方法用于等待对象的锁或者通知其他线程对象的监视器可用。</p>\n</blockquote>\n<blockquote>\n<p>在 Java 的线程中并没有可供任何对象使用的锁和同步器。这就是为什么这些方法是 Object 类的一部分，这样 Java 的每一个类都有用于线程间通信的基本方法。\n##为什么 Thread 类的 sleep()和 yield ()方法是静态的？\nThread 类的 sleep()和 yield()方法将在当前正在执行的线程上运行。所以在其他处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在其他非运行线程调用这些方法。</p>\n</blockquote>\n<h2 id=\"并发编程三要素\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#并发编程三要素\" aria-hidden=\"true\">#</a> 并发编程三要素？</h2>\n<ul>\n<li>原子性指的是一个或者多个操作，要么全部执行并且在执行的过程中不被其他操作打断，要么就全部都不执行。</li>\n<li>可见性指多个线程操作一个共享变量时，其中一个线程对变量进行修改后，其他线程可以立即看到修改的结果。</li>\n<li>有序性，即程序的执行顺序按照代码的先后顺序来执行。</li>\n</ul>\n<h2 id=\"executors-类是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#executors-类是什么\" aria-hidden=\"true\">#</a> Executors 类是什么？</h2>\n<blockquote>\n<p>Executors 为 Executor，ExecutorService，ScheduledExecutorService，ThreadFactory 和 Callable 类提供了一些工具方法。Executors 可以用于方便的创建线程池</p>\n</blockquote>\n<h2 id=\"如何优雅的设置睡眠时间\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何优雅的设置睡眠时间\" aria-hidden=\"true\">#</a> 如何优雅的设置睡眠时间</h2>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>HOURS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">899</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><h2 id=\"如何停止一个线程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何停止一个线程\" aria-hidden=\"true\">#</a> 如何停止一个线程</h2>\n<ol>\n<li>使用退出标志使线程正常退出</li>\n</ol>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafe</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> exit <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>exit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><ol start=\"2\">\n<li>使用stop方法，不过该方法已经被标记为过时的方法（因为会造成死锁）</li>\n</ol>\n<blockquote>\n<p>它会解除由线程获取的所有锁定，当在一个线程对象上调用stop()方法时，这个线程对象所运行的线程就会立即停止，假如一个线程正在执行：synchronized void { x = 3; y = 4;}　由于方法是同步的，多个线程访问时总能保证x,y被同时赋值，而如果一个线程正在执行到x = 3;时，被调用了 stop()方法，即使在同步块中，它也干脆地stop了，这样就产生了不完整的残废数据。而多线程编程中最最基础的条件要保证数据的完整性，所以请忘记线程的stop方法，以后我们再也不要说“停止线程”了。而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果 很难检查出真正的问题所在。</p>\n</blockquote>\n<blockquote>\n<p>suspend()方法容易发生死锁。调用suspend()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此 时，其他任何线程都不能访问锁定的资源，除非被&quot;挂起&quot;的线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就 会造成死锁。所以不应该使用suspend()，而应在自己的Thread类中置入一个标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用 wait()命其进入等待状态。若标志指出线程应当恢复，则用一个notify()重新启动线程。</p>\n</blockquote>\n<ol start=\"3\">\n<li>使用interrupt（）方法中断线程</li>\n</ol>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestThread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程被停止了，我要退出\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程已经被停止了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br></div></div><h2 id=\"yield-方法和join-的作用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#yield-方法和join-的作用\" aria-hidden=\"true\">#</a> yield()方法和join()的作用</h2>\n<p><strong>yield()方法</strong></p>\n<blockquote>\n<p>放弃当前cpu资源，将它让给其他的任务占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片。</p>\n</blockquote>\n<p><strong>join()方法</strong></p>\n<blockquote>\n<p>join是指把指定的线程加入到当前线程，比如join某个线程a, 会让当前线程b进入等待,直到a的生命周期结束，此期间b线程是处于blocked状态。</p>\n</blockquote>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestThread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待a线程执行完成才会执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div></div><h2 id=\"线程的优先级\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#线程的优先级\" aria-hidden=\"true\">#</a> 线程的优先级</h2>\n<blockquote>\n<p>在操作系统中，线程可以划分优先级，优先级较高的线程得到cpu资源比较多，也就是cpu有限执行优先级较高的线程对象中的任务, <strong>但是不能保证一定 优先级高，就先执行.</strong></p>\n</blockquote>\n<blockquote>\n<p>Java的优先级分为1~ 10个等级，数字越大优先级越高，默认优先级大小为5。超出范围则抛出:</p>\n</blockquote>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span> IlegalArgumentException</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><blockquote>\n<p>线程的优先级具有继承性，比如a线程启动b线程，b线程与a优先级是一样的。</p>\n</blockquote>\n<p>##interrupted方法和isInterrupted方法的区别？</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token doc-comment comment\">/**\n*该方法是判断当前线程是否中断（即执行该方法的线程）\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token doc-comment comment\">/**\n*该方法是指this关键字所在类的对象是否中断\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><p><strong>举一个例子</strong></p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">ThreadA</span> threadA<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthreadA<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>threadA<span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false 判断的是主线程main</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>threadA<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true 判断的是threadA线程</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><h2 id=\"java虚拟机退出时daemon线程中的finally块一定会执行吗\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java虚拟机退出时daemon线程中的finally块一定会执行吗\" aria-hidden=\"true\">#</a> Java虚拟机退出时Daemon线程中的finally块一定会执行吗?</h2>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestThread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div></div><p><strong>控制台没有任何输出说明finally中的语句没有执行</strong></p>\n<h2 id=\"设置线程上下文类加载器\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#设置线程上下文类加载器\" aria-hidden=\"true\">#</a> 设置线程上下文类加载器</h2>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setContextClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassLoader</span> cl<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ClassLoader</span> <span class=\"token function\">getContextClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><h2 id=\"什么是原子操作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是原子操作\" aria-hidden=\"true\">#</a> 什么是原子操作？</h2>\n<p>不可中断的一个或一系列操作</p>\n<h2 id=\"并发和并行\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#并发和并行\" aria-hidden=\"true\">#</a> 并发和并行</h2>\n<ul>\n<li>\n<p><strong>并发</strong>:一个处理器同时处理多个任务。</p>\n</li>\n<li>\n<p><strong>并行</strong>:多个处理器或者是多核的处理器同时处理多个不同的任务.前者是逻辑上的同时发生（simultaneous），而后者是物理上的同时发生．</p>\n</li>\n</ul>\n<blockquote>\n<p>并发性(concurrency)，又称共行性，是指能处理多个同时性活动的能力，并发事件之间不一定要同一时刻发生。</p>\n</blockquote>\n<blockquote>\n<p>并行(parallelism)是指同时发生的两个并发事件，具有并发的含义，而并发则不一定并行。</p>\n</blockquote>\n<blockquote>\n<p>来个比喻：并发和并行的区别就是一个人同时吃三个馒头和三个人同时吃三个馒头。</p>\n</blockquote>\n<h2 id=\"什么是多线程中的上下文切换\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是多线程中的上下文切换\" aria-hidden=\"true\">#</a> 什么是多线程中的上下文切换？</h2>\n<blockquote>\n<p>多线程会共同使用一组计算机上的 CPU，而线程数大于给程序分配的 CPU 数量时，为了让各个线程都有执行的机会，就需要轮转使用 CPU。不同的线程切换使用 CPU发生的切换数据等就是上下文切换。</p>\n</blockquote>\n<h2 id=\"死锁与活锁的区别-死锁与饥饿的区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#死锁与活锁的区别-死锁与饥饿的区别\" aria-hidden=\"true\">#</a> 死锁与活锁的区别，死锁与饥饿的区别？</h2>\n<blockquote>\n<p>死锁: 是指两个或两个以上的进程（或线程）在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p>\n</blockquote>\n<ul>\n<li>产生死锁的必要条件：</li>\n</ul>\n<blockquote>\n<p>1、互斥条件：所谓互斥就是进程在某一时间内独占资源。</p>\n</blockquote>\n<blockquote>\n<p>2、请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</p>\n</blockquote>\n<blockquote>\n<p>3、不剥夺条件:进程已获得资源，在末使用完之前，不能强行剥夺。 4、循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p>\n</blockquote>\n<p><strong>活锁</strong>: 任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败。</p>\n<blockquote>\n<p>活锁和死锁的区别在于，处于活锁的实体是在不断的改变状态，所谓的“活”， 而处于死锁的实体表现为等待；活锁有可能自行解开，死锁则不能。</p>\n</blockquote>\n<p><strong>饥饿</strong>: 一个或者多个线程因为种种原因无法获得所需要的资源，导致一直无法执行的状态。</p>\n<ul>\n<li>Java 中导致饥饿的原因：</li>\n</ul>\n<blockquote>\n<p>1.高优先级线程吞噬所有的低优先级线程的 CPU 时间。</p>\n</blockquote>\n<blockquote>\n<p>2.线程被永久堵塞在一个等待进入同步块的状态，因为其他线程总是能在它之前持续地对该同步块进行访问。</p>\n</blockquote>\n<blockquote>\n<p>3.线程在等待一个本身也处于永久等待完成的对象(比如调用这个对象的 wait 方法)，因为其他线程总是被持续地获得唤醒。</p>\n</blockquote>\n<h2 id=\"java-中用到的线程调度算法是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java-中用到的线程调度算法是什么\" aria-hidden=\"true\">#</a> Java 中用到的线程调度算法是什么？</h2>\n<blockquote>\n<p>采用时间片轮转的方式。可以设置线程的优先级，会映射到下层的系统上面的优先级上，如非特别需要，尽量不要用，防止线程饥饿。\n##什么是线程组，为什么在 Java 中不推荐使用？\nThreadGroup 类，可以把线程归属到某一个线程组中，线程组中可以有线程对象，也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式。\n##sleep 与 wait 的区别</p>\n</blockquote>\n<ol>\n<li>\n<p>对于 sleep()方法，我们首先要知道该方法是属于 Thread 类中的。而 wait()方法，则是属于Object 类中的。</p>\n</li>\n<li>\n<p>sleep()方法导致了程序暂停执行指定的时间，让出 cpu执行其他线程，但是他的监控状态依然保持着，当指定的时间到了又会自动恢复运行状态。</p>\n</li>\n<li>\n<p>在调用 sleep()方法的过程中，线程不会释放对象锁。</p>\n</li>\n<li>\n<p>而当调用 wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用 notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</p>\n</li>\n</ol>\n<h2 id=\"java后台线程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java后台线程\" aria-hidden=\"true\">#</a> Java后台线程</h2>\n<ol>\n<li>定义：守护线程–也称“服务线程”，他是后台线程，它有一个特性，即为用户线程提供公共服务，在没有用户线程可服务时会自动离开。</li>\n<li>优先级：守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。</li>\n<li>设置：通过 setDaemon(true)来设置线程为“守护线程”；将一个用户线程设置为守护线程的方式是在 线程对象创建 之前 用线程对象的 setDaemon 方法。</li>\n<li>在 Daemon 线程中产生的新线程也是 Daemon 的。</li>\n<li>线程则是 JVM 级别的，以 Tomcat 为例，如果你在 Web 应用中启动一个线程，这个线程的生命周期并不会和 Web 应用程序保持同步。也就是说，即使你停止了 Web 应用，这个线程依旧是活跃的。</li>\n<li>example: 垃圾回收线程就是一个经典的守护线程，当我们的程序中不再有任何运行的Thread,程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是 JVM 上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于实时监控和管理系统中的可回收资源。</li>\n<li>生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。也就是说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。当 JVM 中所有的线程都是守护线程的时候，JVM 就可以退出了；如果还有一个或以上的非守护线程则 JVM 不会退出。</li>\n</ol>\n<h2 id=\"threadlocal-作用-线程本地存储\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#threadlocal-作用-线程本地存储\" aria-hidden=\"true\">#</a> ThreadLocal 作用（线程本地存储）</h2>\n<p>ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储，ThreadLocal 的作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。</p>\n<p>使用场景\n最常见的 ThreadLocal 使用场景为 用来解决 数据库连接、Session 管理等。</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadLocal</span> threadSession <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Session</span> <span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InfrastructureException</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token class-name\">Session</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Session</span><span class=\"token punctuation\">)</span> threadSession<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    s <span class=\"token operator\">=</span> <span class=\"token function\">getSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    threadSession<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HibernateException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InfrastructureException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div></div><h2 id=\"runnable-和-callable-的区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#runnable-和-callable-的区别\" aria-hidden=\"true\">#</a> Runnable 和 Callable 的区别</h2>\n<ol>\n<li>\n<p>Callable 规定（重写）的方法是 call()，Runnable 规定（重写）的方法是 run()。</p>\n</li>\n<li>\n<p>Callable 的任务执行后可返回值，而 Runnable 的任务是不能返回值的。</p>\n</li>\n<li>\n<p>Call 方法可以抛出异常，run 方法不可以。</p>\n</li>\n<li>\n<p>运行 Callable 任务可以拿到一个 Future 对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过 Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。</p>\n</li>\n</ol>\n<h2 id=\"什么是-future\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是-future\" aria-hidden=\"true\">#</a> 什么是 Future？</h2>\n<p>在并发编程中，我们经常用到非阻塞的模型，在之前的多线程的三种实现中，不管是继承 thread 类还是实现 runnable 接口，都无法保证获取到之前的执行结果。</p>\n<p>通过实现 Callback 接口，并用 Future 可以来接收多线程的执行结果。Future 表示一个可能还没有完成的异步任务的结果，针对这个结果可以添加Callback 以便在任务执行成功或失败后作出相应的操作。</p>\n<h2 id=\"写一个callable案例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#写一个callable案例\" aria-hidden=\"true\">#</a> 写一个Callable案例</h2>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestFuture</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> task<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CallableThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CallableThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div></div><h2 id=\"synchronized底层的两个jvm指令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#synchronized底层的两个jvm指令\" aria-hidden=\"true\">#</a> synchronized底层的两个jvm指令</h2>\n<p>monitor enter 和 monitor exit</p>\n<h2 id=\"java对象头\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java对象头\" aria-hidden=\"true\">#</a> java对象头</h2>\n<p>synchronized用的锁是存在Java对象头里的。对象如果是数组类型，虚拟机用3个字宽(Word)存储对象头，如果对象是非数组类型，用2字宽存储对象头。</p>\n<h2 id=\"什么是cas\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是cas\" aria-hidden=\"true\">#</a> 什么是CAS</h2>\n<p>CAS的全称为Compare-And-Swap（比较并交换）,它是一条CPU并发原语。</p>\n<p>它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。</p>\n<p>CAS并发原语体现在JAVA语言中就是sun.misc.Unsafe类中的各个方法。调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令。</p>\n<p>这是一种完全依赖于硬件的功能，通过它实现了原子操作。再次强调，由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致问题。</p>\n<h2 id=\"unsafe类-jdk-internal-misc-unsafe\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#unsafe类-jdk-internal-misc-unsafe\" aria-hidden=\"true\">#</a> UnSafe类（jdk.internal.misc.UnSafe）</h2>\n<p>是CAS的核心类，由于Java 方法无法直接访问底层系统，需要通过本地(native) 方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定内存的数据。Unsafe 类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，因为Java中CAS操作的执行依赖于Unsafe类的方法。</p>\n<p>注意Unsafe类中的所有方法都是native修饰的，也就是说Unsafe类中的方法都直接调用操作系统底层资源执行相应任务。</p>\n","export * from \"-!../../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[1]!../../../../../node_modules/@vuepress/bundler-webpack/lib/build/ssr/vuepressLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./java_thread_base.html.vue?vue&type=template&id=6d4aea7d\"","import { ssrRender } from \"./java_thread_base.html.vue?vue&type=template&id=6d4aea7d\"\nconst script = {}\nimport { ssrContextKey } from 'vue'\nscript.ssrRender = (...args) => {\n  const ssrContext = args[2].appContext.provides[ssrContextKey]\n  ssrContext._registeredComponents.add(\"D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\@vuepress\\\\bundler-webpack\\\\lib\\\\build\\\\ssr\\\\vuepressLoader.js!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\vue-loader\\\\dist\\\\index.js??ruleSet[0].use[1]!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\docs\\\\.vuepress\\\\.temp\\\\pages\\\\java\\\\java_thread_base.html.vue\")\n  return ssrRender(...args)\n}\n\n\nexport default script"],"names":["$withBase"],"sourceRoot":""}