{"version":3,"file":"5381.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EC/BA;;;;;ACAgF;AAChF;AACA,CAAmC;AACnC;AACA,iDAAiD,2BAAa;AAC9D;AACA,SAAS,SAAS;AAClB;;;AAGA,uDAAe","sources":["webpack://yaomin/./docs/.vuepress/.temp/pages/framework/design_mode.html.js","webpack://yaomin/./docs/.vuepress/.temp/pages/framework/design_mode.html.vue","webpack://yaomin/./docs/.vuepress/.temp/pages/framework/design_mode.html.vue?2bd1"],"sourcesContent":["export const data = {\n  \"key\": \"v-4cebc57f\",\n  \"path\": \"/framework/design_mode.html\",\n  \"title\": \"设计模式\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"基础知识\",\n      \"slug\": \"基础知识\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"境界\",\n      \"slug\": \"境界\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"framework/design_mode.md\",\n  \"git\": {\n    \"contributors\": [\n      {\n        \"name\": \"yaomin_java\",\n        \"email\": \"272991874@qq.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"设计模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#设计模式\" aria-hidden=\"true\">#</a> 设计模式</h1>\n<h2 id=\"基础知识\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基础知识\" aria-hidden=\"true\">#</a> 基础知识</h2>\n<p>a)    面向对象范式。也就是人们传说的思想。封装、继承和多态这些东西，在我看来比if、for等稍微高一点，也属于语法问题。面向对象编程要掌握的三大原则是柏拉图(Plato)原则、里氏(Liskov)替换原则和Parnas原则。这三个原则其实非常简单。任何原则，你觉得很难一见钟情，很难快速认同，那它就不会是好原则。</p>\n<p>b)    设计原则。许多人列举了7大原则，如单一职责原则、开闭原则、里氏代换原则、依赖倒转原则、接口隔离原则、合成复用原则、迪米特法则。LSP，我将它提升为面向对象范式的3大基石之一；单一职责和接口隔离，主要作为面向对象分析/OOA时职责划分所遵循的原则，此时你可以不太在意。依赖倒转原则，我把它作为垃圾扔掉，因为开闭原则或者直接地说“依赖于抽象类型原则”已经包含了依赖倒转原则的精华，而依赖倒转原则的糟粕由IoC继承。当然，回调，我很强调。所以，你要掌握的有抽象依赖原则(OCP)、单向依赖原则(含对回调的学习)和最低依赖原则(合成复用原则、迪米特法则)。</p>\n<p>c)    UML的初步了解。这是学习设计模式的工具。在早期，你甚至可以仅了解BlueJ的相关图示，也就10分钟的事情。</p>\n<h2 id=\"境界\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#境界\" aria-hidden=\"true\">#</a> 境界</h2>\n<p>《五灯会元》卷十七中，有一则唐朝禅师青原惟信禅师的语录:“老僧三十年前未参禅时，见山是山，见水是水。\n及至后来亲见知识，有个入处，见山不是山，见水不是水。而今得个休歇处，依前见山只是山，见水只是水。”</p>\n<p>a)    仔细研究GoF的[设计模式]，逐个学习其意图和结构，是一个抱着字典学习英语的方式。\n见山是山，见水是水，导致你可能在实际工作中生搬硬套、东施效颦。</p>\n<p>b)    建议从简单的场景出发，自己发现或设计出某种模式。\n你从中体会该模式是如何解决问题的，这样，该模式成为你自己的东西，你才不会出现知易行难的问题。\n所有的设计模式不过是基本原则和理念在特定场合的应用。你可能不知道某个设计模式的名字，但是你知道它一切的优缺点和变体以及应用场合。见山不是山，见水不是水。</p>\n<p>c)     你对基本原则和理念融会贯通，你可以惋惜：“我找到一种模式，原来在<a href=\"%E5%85%B6%E5%AE%9E%E6%98%AF%E6%9F%90%E4%B8%AA%E7%89%B9%E6%AE%8A%E7%9A%84%E4%B9%A6%E3%80%81%E6%96%87%E7%AB%A0%E6%8F%90%E5%88%B0%E7%9A%84%E6%A8%A1%E5%BC%8F\">设计模式</a>中早就有了这种模式”。这时，模式不模式又如何呢？反模式又怎样。看见一个模式，你会说：“嗯，这是一种有用的模式”。见山只是山，见水只是水。</p>\n","import { ssrRender } from \"./design_mode.html.vue?vue&type=template&id=4147414c\"\nconst script = {}\nimport { ssrContextKey } from 'vue'\nscript.ssrRender = (...args) => {\n  const ssrContext = args[2].appContext.provides[ssrContextKey]\n  ssrContext._registeredComponents.add(\"D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\@vuepress\\\\bundler-webpack\\\\lib\\\\build\\\\ssr\\\\vuepressLoader.js!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\vue-loader\\\\dist\\\\index.js??ruleSet[0].use[1]!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\docs\\\\.vuepress\\\\.temp\\\\pages\\\\framework\\\\design_mode.html.vue\")\n  return ssrRender(...args)\n}\n\n\nexport default script"],"names":[],"sourceRoot":""}