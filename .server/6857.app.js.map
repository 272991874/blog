{"version":3,"file":"6857.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EC5CA;;;;;;;;;;;;ACAkF;AAClF;AACA,CAAmC;AACnC;AACA,iDAAiD,2BAAa;AAC9D;AACA,SAAS,SAAS;AAClB;;;AAGA,yDAAe","sources":["webpack://yaomin/./docs/.vuepress/.temp/pages/soft/sql_injection.html.js","webpack://yaomin/./docs/.vuepress/.temp/pages/soft/sql_injection.html.vue","webpack://yaomin/./docs/.vuepress/.temp/pages/soft/sql_injection.html.vue?86c9"],"sourcesContent":["export const data = {\n  \"key\": \"v-06ee0042\",\n  \"path\": \"/soft/sql_injection.html\",\n  \"title\": \"SQL 注入\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"mybatis预编译不一定安全\",\n      \"slug\": \"mybatis预编译不一定安全\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"like \\\"%\\\" #{name} \\\"%\\\"\",\n          \"slug\": \"like-name\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"in 之后的多个参数\",\n          \"slug\": \"in-之后的多个参数\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"order by 之后\",\n          \"slug\": \"order-by-之后\",\n          \"children\": []\n        }\n      ]\n    }\n  ],\n  \"filePathRelative\": \"soft/sql_injection.md\",\n  \"git\": {\n    \"contributors\": [\n      {\n        \"name\": \"Amin.Yao\",\n        \"email\": \"Amin.Yao@gaiaworks.cn\",\n        \"commits\": 2\n      }\n    ]\n  }\n}\n","<h1 id=\"sql-注入\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sql-注入\" aria-hidden=\"true\">#</a> SQL 注入</h1>\n<h2 id=\"mybatis预编译不一定安全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mybatis预编译不一定安全\" aria-hidden=\"true\">#</a> mybatis预编译不一定安全</h2>\n<h3 id=\"like-name\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#like-name\" aria-hidden=\"true\">#</a> like &quot;%&quot; #{name} &quot;%&quot;</h3>\n<div class=\"language-mysql ext-mysql line-numbers-mode\"><pre v-pre class=\"language-mysql\"><code>select * from user where name like &quot;%&quot;#{name}&quot;%&quot;\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>这种情况预编译机制是正常通过的，但sql的执行结果不会返回包含%的用户，而是返回了所有用户。</p>\n<ul>\n<li>\n<p>原因： %在mysql中是关键字，如果使用like '%%%'，该like条件会失效</p>\n</li>\n<li>\n<p>解决： 需要对%进行转义：%</p>\n</li>\n</ul>\n<p>转义后的sql变成：select * from user where name like '%%%'; 只会返回包含%的用户。</p>\n<p>如果用户输入： %' AND 1=1 AND '%'=' ，会构成如下SQL:</p>\n<div class=\"language-mysql ext-mysql line-numbers-mode\"><pre v-pre class=\"language-mysql\"><code>select * from user where name like  '%' '%' AND 1 = 1 AND '%'='' '%'\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><h3 id=\"in-之后的多个参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#in-之后的多个参数\" aria-hidden=\"true\">#</a> in 之后的多个参数</h3>\n<p>in之后多个id查询时使用#</p>\n<div class=\"language-mysql ext-mysql line-numbers-mode\"><pre v-pre class=\"language-mysql\"><code>Select * from news where id in (#{ids})\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>正确用法为使用foreach，而不是将#替换为$</p>\n<div class=\"language-mysql ext-mysql line-numbers-mode\"><pre v-pre class=\"language-mysql\"><code>id in\n&lt;foreach collection=&quot;ids&quot; item=&quot;item&quot; open=&quot;(&quot;separatosr=&quot;,&quot; close=&quot;)&quot;&gt;\n#{ids}\n&lt;/foreach&gt;\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><h3 id=\"order-by-之后\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#order-by-之后\" aria-hidden=\"true\">#</a> order by 之后</h3>\n<p>这种场景应当在Java层面做映射，设置一个枚举，仅使用枚举对应的值，或者创建一个字段/表名数组，这样保证传入的字段或者表名都在白名单里面。\n需要注意的是在mybatis-generator自动生成的SQL语句中，order by使用的也是$，而like和in没有问题。</p>\n","import { ssrRender } from \"./sql_injection.html.vue?vue&type=template&id=25e3e3a2\"\nconst script = {}\nimport { ssrContextKey } from 'vue'\nscript.ssrRender = (...args) => {\n  const ssrContext = args[2].appContext.provides[ssrContextKey]\n  ssrContext._registeredComponents.add(\"D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\@vuepress\\\\bundler-webpack\\\\lib\\\\build\\\\ssr\\\\vuepressLoader.js!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\vue-loader\\\\dist\\\\index.js??ruleSet[0].use[1]!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\docs\\\\.vuepress\\\\.temp\\\\pages\\\\soft\\\\sql_injection.html.vue\")\n  return ssrRender(...args)\n}\n\n\nexport default script"],"names":[],"sourceRoot":""}