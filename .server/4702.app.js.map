{"version":3,"file":"4702.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ECjFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAgF;AAChF;AACA,CAAmC;AACnC;AACA,iDAAiD,2BAAa;AAC9D;AACA,SAAS,SAAS;AAClB;;;AAGA,uDAAe","sources":["webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_equals.html.js","webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_equals.html.vue","webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_equals.html.vue?3e08"],"sourcesContent":["export const data = {\n  \"key\": \"v-6de5d8d1\",\n  \"path\": \"/java/java_equals.html\",\n  \"title\": \"equals和== 的区别是什么?\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"理论\",\n      \"slug\": \"理论\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"功能不同\",\n          \"slug\": \"功能不同\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"定义不同\",\n          \"slug\": \"定义不同\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"运行速度不同\",\n          \"slug\": \"运行速度不同\",\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"level\": 2,\n      \"title\": \"示例\",\n      \"slug\": \"示例\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"速度测试\",\n      \"slug\": \"速度测试\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"同样计算100万次赋值\",\n      \"slug\": \"同样计算100万次赋值\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"Object的速度测试\",\n          \"slug\": \"object的速度测试\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"String的速度测试\",\n          \"slug\": \"string的速度测试\",\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"level\": 2,\n      \"title\": \"总结\",\n      \"slug\": \"总结\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/java_equals.md\",\n  \"git\": {\n    \"contributors\": [\n      {\n        \"name\": \"yaomin\",\n        \"email\": \"272991874@qq.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"equals和-的区别是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#equals和-的区别是什么\" aria-hidden=\"true\">#</a> equals和== 的区别是什么?</h1>\n<h2 id=\"理论\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#理论\" aria-hidden=\"true\">#</a> 理论</h2>\n<h3 id=\"功能不同\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#功能不同\" aria-hidden=\"true\">#</a> 功能不同</h3>\n<p>“＝＝”是判断两个变量或实例是不是指向同一个内存空间。\n“equals”是判断两个变量或实例所指向的内存空间的值是不是相同。</p>\n<h3 id=\"定义不同\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#定义不同\" aria-hidden=\"true\">#</a> 定义不同</h3>\n<p>“equals”在JAVA中是一个方法。\n“＝＝”在JAVA中只是一个运算符。</p>\n<h3 id=\"运行速度不同\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#运行速度不同\" aria-hidden=\"true\">#</a> 运行速度不同</h3>\n<p>“＝＝”比”equals”运行速度快，因为”＝＝”只是比较引用。\n“equals”比”＝＝”运行速度要慢。</p>\n<h2 id=\"示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例\" aria-hidden=\"true\">#</a> 示例</h2>\n<h2 id=\"速度测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#速度测试\" aria-hidden=\"true\">#</a> 速度测试</h2>\n<h2 id=\"同样计算100万次赋值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#同样计算100万次赋值\" aria-hidden=\"true\">#</a> 同样计算100万次赋值</h2>\n<h3 id=\"object的速度测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#object的速度测试\" aria-hidden=\"true\">#</a> Object的速度测试</h3>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>    public static void main(String[] args) {\n        Object s1 = new Object();\n        Object s2 = new Object();\n        long l1 = System.nanoTime();\n        for (int i = 0; i &lt; 1000000; i++) {\n            boolean b = s1 == s2;\n        }\n        long l2 = System.nanoTime();\n        System.out.println(l2-l1);\n    }\n\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>＝＝的输出结果为1998300（纳秒）</p>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>    public static void main(String[] args) {\n        Object s1 = new Object();\n        Object s2 = new Object();\n        long l1 = System.nanoTime();\n        for (int i = 0; i &lt; 1000000; i++) {\n            boolean b = s1.equals(s2);\n        }\n        long l2 = System.nanoTime();\n        System.out.println(l2-l1);\n    }\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><p>equals的输出结果为3350200（纳秒）</p>\n<h3 id=\"string的速度测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#string的速度测试\" aria-hidden=\"true\">#</a> String的速度测试</h3>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>    public static void main(String[] args) {\n        String s1 = &quot;abc&quot;;\n        String s2 = &quot;def&quot;;\n        long l1 = System.nanoTime();\n        for (int i = 0; i &lt; 1000000; i++) {\n            boolean b = s1 == s2;\n        }\n        long l2 = System.nanoTime();\n        System.out.println(l2-l1);\n    }\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><p>＝＝的输出结果为2074099（纳秒）</p>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>    public static void main(String[] args) {\n        String s1 = &quot;abc&quot;;\n        String s2 = &quot;def&quot;;\n        long l1 = System.nanoTime();\n        for (int i = 0; i &lt; 1000000; i++) {\n            boolean b = s1.equals(s2);\n        }\n        long l2 = System.nanoTime();\n        System.out.println(l2-l1);\n    }\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><p>equals的输出结果为4089599（纳秒）</p>\n<p>源码\nObject的源码如下</p>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>    public boolean equals(Object obj) {\n        return (this == obj);\n    }\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><p>而String的源码在Object的源码上添加了其他的判断逻辑</p>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>    private final char value[];\n\n    public boolean equals(Object anObject) {\n        if (this == anObject) {\n            return true;\n        }\n        if (anObject instanceof String) {\n            String anotherString = (String)anObject;\n            int n = value.length;\n            if (n == anotherString.value.length) {\n                char v1[] = value;\n                char v2[] = anotherString.value;\n                int i = 0;\n                while (n-- != 0) {\n                    if (v1[i] != v2[i])\n                        return false;\n                    i++;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br></div></div><p>由源码可以看到，其实equals本身就是用来判断相等与否，而＝＝判断的是内存中地址的哈希值是否相等</p>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>        String s1 = &quot;abc&quot;;\n        String s2 = &quot;abc&quot;;\n\n        TestString s3 = new TestString(&quot;abc&quot;);\n        TestString s4 = new TestString(&quot;abc&quot;);\n\n        boolean b1 = s1.equals(s2);\n        boolean b2 = s3.equals(s4);\n        int hash_s1 = s1.hashCode();\n        int hash_s2 = s2.hashCode();\n        int hash_s3 = s3.hashCode();\n        int hash_s4 = s4.hashCode();\n\n        boolean b3 = s1==s2;\n        boolean b4 = s3==s4;\n\n        System.out.println(&quot;s1.hashCode() = &quot; + hash_s1);\n        System.out.println(&quot;s2.hashCode() = &quot; + hash_s2);\n        System.out.println(&quot;s3.hashCode() = &quot; + hash_s3);\n        System.out.println(&quot;s4.hashCode() = &quot; + hash_s4);\n        System.out.println(&quot;s1.equals(s2)\\t (&quot;+ hash_s1 +&quot;=&quot;+ hash_s2 +&quot;)\\t &quot; + s1.equals(s2));\n        System.out.println(&quot;s1.equals(s1)\\t (&quot;+ hash_s1 +&quot;=&quot;+ hash_s1 +&quot;)\\t &quot; + s1.equals(s1));\n        System.out.println(&quot;s1==s2\\t\\t\\t (&quot;+ hash_s1 +&quot;=&quot;+ hash_s2 +&quot;)\\t &quot;+ b3);\n        System.out.println(&quot;s3.equals(s4)\\t (&quot;+ hash_s3 +&quot;=&quot;+ hash_s4 +&quot;)\\t &quot; + s3.equals(s4));\n        System.out.println(&quot;s3.equals(s3)\\t (&quot;+ hash_s3 +&quot;=&quot;+ hash_s3 +&quot;)\\t &quot; + s3.equals(s3));\n        System.out.println(&quot;s3==s4\\t\\t\\t (&quot;+ hash_s3 +&quot;=&quot;+ hash_s4 +&quot;)\\t &quot;+ b4);\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br></div></div><p>输出如下</p>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>s1.hashCode() = 96354\ns2.hashCode() = 96354\ns3.hashCode() = 1163157884\ns4.hashCode() = 1956725890\n\ns1.equals(s2)     (96354=96354)     true\ns1.equals(s1)     (96354=96354)     true\ns1==s2             (96354=96354)     true\n\ns3.equals(s4)     (1163157884=1956725890)     false\ns3.equals(s3)     (1163157884=1163157884)     true\ns3==s4             (1163157884=1956725890)     false\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div></div><p>如上，我们定义了两个TestString，但是哈希值各不相同，所以＝＝和equals也为false，但是假如我们要用自己的方法判断TestString是否相等的话，我们就要重写hashCode和equals函数</p>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        TestString that = (TestString) o;\n        return Objects.equals(string, that.string);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(string);\n    }\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div></div><p>如此一来，输出就变成了</p>\n<div class=\"language-Java ext-Java line-numbers-mode\"><pre v-pre class=\"language-Java\"><code>s1.hashCode() = 96354\ns2.hashCode() = 96354\ns3.hashCode() = 96385\ns4.hashCode() = 96385\ns1.equals(s2)     (96354=96354)     true\ns1.equals(s1)     (96354=96354)     true\ns1==s2             (96354=96354)     true\ns3.equals(s4)     (96385=96385)     true\ns3.equals(s3)     (96385=96385)     true\ns3==s4             (96385=96385)     false\n\nProcess finished with exit code 0\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div></div><p>这里为什么s3＝＝s4依然为false呢，因为＝＝直接判断了地址，与hashCode函数无关。</p>\n<h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\" aria-hidden=\"true\">#</a> 总结</h2>\n<p>“＝＝”比”equals”运行速度快0.5倍，而在String中，差距拉开到了接近1倍。\n“equals”是一个方法，其中用到了”＝＝”，而不同的函数可以通过重写”equals”在不同的类中添加比较方法</p>\n","import { ssrRender } from \"./java_equals.html.vue?vue&type=template&id=78778533\"\nconst script = {}\nimport { ssrContextKey } from 'vue'\nscript.ssrRender = (...args) => {\n  const ssrContext = args[2].appContext.provides[ssrContextKey]\n  ssrContext._registeredComponents.add(\"D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\@vuepress\\\\bundler-webpack\\\\lib\\\\build\\\\ssr\\\\vuepressLoader.js!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\vue-loader\\\\dist\\\\index.js??ruleSet[0].use[1]!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\docs\\\\.vuepress\\\\.temp\\\\pages\\\\java\\\\java_equals.html.vue\")\n  return ssrRender(...args)\n}\n\n\nexport default script"],"names":[],"sourceRoot":""}