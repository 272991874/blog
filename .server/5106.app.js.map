{"version":3,"file":"5106.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;EC/BA;EAAA,uEACmD,EAAE,EAAC,YAAY;IADlE,mCACuC,CAAmD;UAD1F;QAAA;;;UAAA,kCACmE,YAAU;;;;IAD7E;;EAAA;EAAA,uEAC+G,EAAE,EAAC,KAAK;IADvH,mCACmG,CAAoC;UADvI;QAAA;;;UAAA,kCACwH,IAAE;;;;IAD1H;;EAAA;;;;;;;;;;;;;;;;;;;;;0+CAAA,mCAkCM,KAAG,EAAEA,cAAS;;;;;AElC8D;AAClF;AACA,CAAmC;AACnC;AACA,iDAAiD,2BAAa;AAC9D;AACA,SAAS,SAAS;AAClB;;;AAGA,yDAAe","sources":["webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_hashcode.html.js","webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_hashcode.html.vue","webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_hashcode.html.vue?4992","webpack://yaomin/./docs/.vuepress/.temp/pages/java/java_hashcode.html.vue?eb1e"],"sourcesContent":["export const data = {\n  \"key\": \"v-abb9a756\",\n  \"path\": \"/java/java_hashcode.html\",\n  \"title\": \"两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"为什么要用31*h？\",\n      \"slug\": \"为什么要用31-h\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"总结\",\n      \"slug\": \"总结\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/java_hashcode.md\",\n  \"git\": {\n    \"contributors\": [\n      {\n        \"name\": \"yaomin\",\n        \"email\": \"272991874@qq.com\",\n        \"commits\": 2\n      }\n    ]\n  }\n}\n","<h1 id=\"两个对象的-hashcode-相同-则-equals-也一定为-true-对吗\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#两个对象的-hashcode-相同-则-equals-也一定为-true-对吗\" aria-hidden=\"true\">#</a> 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h1>\n<nav class=\"table-of-contents\"><ul><li><RouterLink to=\"#为什么要用31-h\">为什么要用31*h？</RouterLink></li><li><RouterLink to=\"#总结\">总结</RouterLink></li></ul></nav>\n<p>答案是否定的</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Ma\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"NB\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><p>输出结果如下</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token number\">2515</span>\n<span class=\"token number\">2515</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><p>什么情况？</p>\n<p>下面是String的hashCode的算法</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">//这里的value是String的char数组</span>\n<span class=\"token keyword\">char</span> val<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nh <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> h <span class=\"token operator\">+</span> val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nhash <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div></div><p>模拟一下运算，首先MaNB分别对应77,97,78,66。按照hash算法计算一遍就是</p>\n<p>“Ma” = 31*(31*0+77)+97=2484</p>\n<p>“NB” = 31*(312*0+78)+66=2484</p>\n<p>按照这个规律，我们还可以得出O#的hash值也等于2484，hash值一样了，但是equals吗，很明显”Ma” ≠ “NB” ≠ “O#”</p>\n<h2 id=\"为什么要用31-h\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么要用31-h\" aria-hidden=\"true\">#</a> 为什么要用31*h？</h2>\n<p>The value 31 was chosen because it is an odd prime. If it were even and the multiplication overflowed, information would be lost, as multiplication by 2 is equivalent to shifting. The advantage of using a prime is less clear, but it is traditional. A nice property of 31 is that the multiplication can be replaced by a shift and a subtraction for better performance: 31 * i == (i &lt;&lt; 5) - i. Modern VMs do this sort of optimization automatically.</p>\n<p>选择值31是因为它是奇数素数。如果是偶数，乘法溢出，信息将丢失，因为乘2等于移位。使用质数的优势不太明显。31的一个很好的特性是乘法可以用移位和减法来代替，以获得更好的性能：31*i 等价于（i 向左位移 5）-i，而位移操作是JVM里最有效的计算方式。现代的虚拟机会自动进行这种优化。</p>\n<img :src=\"$withBase('/images/java-hashcode.png')\" alt=\"hashcode\">\n<p>简单来说就是可以获取更好的性能，但是重复率较高</p>\n<h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\" aria-hidden=\"true\">#</a> 总结</h2>\n<p>equals一样，hash一定一样<br>\nequals不一样，hash一定不一样<br>\nhash一样，equals不一定一样<br>\nhash不一样，equals一定不一样</p>\n","export * from \"-!../../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[1]!../../../../../node_modules/@vuepress/bundler-webpack/lib/build/ssr/vuepressLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./java_hashcode.html.vue?vue&type=template&id=13136432\"","import { ssrRender } from \"./java_hashcode.html.vue?vue&type=template&id=13136432\"\nconst script = {}\nimport { ssrContextKey } from 'vue'\nscript.ssrRender = (...args) => {\n  const ssrContext = args[2].appContext.provides[ssrContextKey]\n  ssrContext._registeredComponents.add(\"D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\@vuepress\\\\bundler-webpack\\\\lib\\\\build\\\\ssr\\\\vuepressLoader.js!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\vue-loader\\\\dist\\\\index.js??ruleSet[0].use[1]!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\docs\\\\.vuepress\\\\.temp\\\\pages\\\\java\\\\java_hashcode.html.vue\")\n  return ssrRender(...args)\n}\n\n\nexport default script"],"names":["$withBase"],"sourceRoot":""}