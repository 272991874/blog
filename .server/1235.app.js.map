{"version":3,"file":"1235.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECjGA;EAAA,uEACmD,EAAE,EAAC,UAAU;IADhE,mCACuC,CAA8C;UADrF;QAAA;;;UAAA,kCACiE,SAAO;;;;IADxE;;EAAA;EAAA,uEAC0G,EAAE,EAAC,QAAQ;IADrH,mCAC8F,CAA0C;UADxI;QAAA;;;UAAA,kCACsH,OAAK;;;;IAD3H;;EAAA;EAAA,uEAC6J,EAAE,EAAC,8CAA8C;IAD9M,mCACiJ,CAAsH;UADvQ;QAAA;;;UAAA,kCAC+M,6CAA2C;;;;IAD1P;;EAAA;EAAA,uEAC4R,EAAE,EAAC,gBAAgB;IAD/S,mCACgR,CAA0D;UAD1U;QAAA;;;UAAA,kCACgT,eAAa;;;;IAD7T;;EAAA;EAAA,uEAC+V,EAAE,EAAC,YAAY;IAD9W,mCACmV,CAAkD;UADrY;QAAA;;;UAAA,kCAC+W,WAAS;;;;IADxX;;EAAA;EAAA,uEAC0Z,EAAE,EAAC,kBAAkB;IAD/a,mCAC8Y,CAA8D;UAD5c;QAAA;;;UAAA,kCACgb,iBAAe;;;;IAD/b;;EAAA;EAAA,uEACie,EAAE,EAAC,mBAAmB;IADvf,mCACqd,CAAiE;UADthB;QAAA;;;UAAA,kCACwf,mBAAiB;;;;IADzgB;;EAAA;EAAA,uEAC0iB,EAAE,EAAC,UAAU;IADvjB,mCAC8hB,CAA8C;UAD5kB;QAAA;;;UAAA,kCACwjB,SAAO;;;;IAD/jB;;EAAA;EAAA,uEACimB,EAAE,EAAC,eAAe;IADnnB,mCACqlB,CAAwD;UAD7oB;QAAA;;;UAAA,kCAConB,cAAY;;;;IADhoB;;EAAA;EAAA,uEACkqB,EAAE,EAAC,aAAa;IADlrB,mCACspB,CAAoD;UAD1sB;QAAA;;;UAAA,kCACmrB,YAAU;;;;IAD7rB;;EAAA;EAAA,uEAC+tB,EAAE,EAAC,kBAAkB;IADpvB,mCACmtB,CAA8D;UADjxB;QAAA;;;UAAA,kCACqvB,iBAAe;;;;IADpwB;;EAAA;EAAA,uEACsyB,EAAE,EAAC,eAAe;IADxzB,mCAC0xB,CAAwD;UADl1B;QAAA;;;UAAA,kCACyzB,cAAY;;;;IADr0B;;EAAA;EAAA;EAAA,wDAGM,KAAG,EAAEA,cAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEHoD;AACxE;AACA,CAAmC;AACnC;AACA,iDAAiD,2BAAa;AAC9D;AACA,SAAS,SAAS;AAClB;;;AAGA,+CAAe","sources":["webpack://yaomin/./docs/.vuepress/.temp/pages/soft/git.html.js","webpack://yaomin/./docs/.vuepress/.temp/pages/soft/git.html.vue","webpack://yaomin/./docs/.vuepress/.temp/pages/soft/git.html.vue?e06a","webpack://yaomin/./docs/.vuepress/.temp/pages/soft/git.html.vue?40fe"],"sourcesContent":["export const data = {\n  \"key\": \"v-52f3aa33\",\n  \"path\": \"/soft/git.html\",\n  \"title\": \"Git\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"设置Git账户\",\n      \"slug\": \"设置git账户\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"文本编辑器\",\n      \"slug\": \"文本编辑器\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"将历史提交的某个commit作为终点分离出一个新的分支，或者将提交的内容cp到新分支上\",\n      \"slug\": \"将历史提交的某个commit作为终点分离出一个新的分支-或者将提交的内容cp到新分支上\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"一、初始化项目仓库常用命令\",\n      \"slug\": \"一、初始化项目仓库常用命令\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"二、开发者常用命令\",\n      \"slug\": \"二、开发者常用命令\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"三、集中测试和发布阶段常用命令\",\n      \"slug\": \"三、集中测试和发布阶段常用命令\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"四、切错分支修复方案，回滚（保留）\",\n      \"slug\": \"四、切错分支修复方案-回滚-保留\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"未提交的情况下\",\n          \"slug\": \"未提交的情况下\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"已提交到本地仓库的情况下\",\n          \"slug\": \"已提交到本地仓库的情况下\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"回滚，拿出来重点讲下\",\n          \"slug\": \"回滚-拿出来重点讲下\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"merge or rebase\",\n          \"slug\": \"merge-or-rebase\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"git merge 回退\",\n          \"slug\": \"git-merge-回退\",\n          \"children\": []\n        }\n      ]\n    }\n  ],\n  \"filePathRelative\": \"soft/git.md\",\n  \"git\": {\n    \"contributors\": [\n      {\n        \"name\": \"Amin.Yao\",\n        \"email\": \"Amin.Yao@gaiaworks.cn\",\n        \"commits\": 9\n      },\n      {\n        \"name\": \"yaomin\",\n        \"email\": \"272991874@qq.com\",\n        \"commits\": 2\n      }\n    ]\n  }\n}\n","<h1 id=\"git\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#git\" aria-hidden=\"true\">#</a> Git</h1>\n<nav class=\"table-of-contents\"><ul><li><RouterLink to=\"#设置git账户\">设置Git账户</RouterLink></li><li><RouterLink to=\"#文本编辑器\">文本编辑器</RouterLink></li><li><RouterLink to=\"#将历史提交的某个commit作为终点分离出一个新的分支-或者将提交的内容cp到新分支上\">将历史提交的某个commit作为终点分离出一个新的分支，或者将提交的内容cp到新分支上</RouterLink></li><li><RouterLink to=\"#一、初始化项目仓库常用命令\">一、初始化项目仓库常用命令</RouterLink></li><li><RouterLink to=\"#二、开发者常用命令\">二、开发者常用命令</RouterLink></li><li><RouterLink to=\"#三、集中测试和发布阶段常用命令\">三、集中测试和发布阶段常用命令</RouterLink></li><li><RouterLink to=\"#四、切错分支修复方案-回滚-保留\">四、切错分支修复方案，回滚（保留）</RouterLink><ul><li><RouterLink to=\"#未提交的情况下\">未提交的情况下</RouterLink></li><li><RouterLink to=\"#已提交到本地仓库的情况下\">已提交到本地仓库的情况下</RouterLink></li><li><RouterLink to=\"#回滚-拿出来重点讲下\">回滚，拿出来重点讲下</RouterLink></li><li><RouterLink to=\"#merge-or-rebase\">merge or rebase</RouterLink></li><li><RouterLink to=\"#git-merge-回退\">git merge 回退</RouterLink></li></ul></li></ul></nav>\n<p><a href=\"https://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener noreferrer\">git分支模型<OutboundLink/></a></p>\n<img :src=\"$withBase('/images/soft/git20210915.png')\" alt=\"git\">\n<ul>\n<li>master（长期）： 主分支, 保留发布版本，发布前记得打tag，方便回滚</li>\n<li>develop（长期）： 开发分支, 保留所有历史版本</li>\n<li>release： 存放预发布版本（v.1.0.0）</li>\n<li>feature/功能名称： feature 功能分支, 功能开发</li>\n<li>hotfix/功能名称： 热修复分支，处理线上紧急bug</li>\n<li>bugfix/功能名称： bug修复分支, 处理release分支发现的bug</li>\n</ul>\n<h2 id=\"设置git账户\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#设置git账户\" aria-hidden=\"true\">#</a> 设置Git账户</h2>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"Amin.Yao\"</span> <span class=\"token comment\">#--global全局设置，去掉可以设置单个项目，新账户保存在当前项目的.git/config文件</span>\n\n<span class=\"token function\">git</span> config --global user.email Amin.Yao@xxxxxx.cn\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><h2 id=\"文本编辑器\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#文本编辑器\" aria-hidden=\"true\">#</a> 文本编辑器</h2>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code><span class=\"token function\">git</span> config --global core.editor emacs\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><h2 id=\"将历史提交的某个commit作为终点分离出一个新的分支-或者将提交的内容cp到新分支上\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#将历史提交的某个commit作为终点分离出一个新的分支-或者将提交的内容cp到新分支上\" aria-hidden=\"true\">#</a> 将历史提交的某个commit作为终点分离出一个新的分支，或者将提交的内容cp到新分支上</h2>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code><span class=\"token function\">git</span> checkout -b 新分支名 某次commitId\n\n例如:\n<span class=\"token function\">git</span> checkout -b newAmin 2c2884cb   <span class=\"token comment\"># 这样就创建了一个名字为newAmin最后一次提交的commitId为2c2884cb的新分支</span>\n\n使用 <span class=\"token function\">git</span> cherry-pick commitId <span class=\"token comment\"># 这会将指定的提交复制到当前分支上</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><h2 id=\"一、初始化项目仓库常用命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#一、初始化项目仓库常用命令\" aria-hidden=\"true\">#</a> 一、初始化项目仓库常用命令</h2>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code><span class=\"token comment\"># 查看分支</span>\n<span class=\"token function\">git</span> branch \n<span class=\"token comment\"># 切换分支</span>\n<span class=\"token function\">git</span> checkout 分支名称\n<span class=\"token comment\"># 创建并且切换分支</span>\n<span class=\"token function\">git</span> checkout -b 分支名称\n\n\n<span class=\"token comment\"># 本地新建仓库</span>\n<span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token comment\"># 添加到本地仓库</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">'提交说明'</span>\n<span class=\"token comment\"># 新建本地develop</span>\n<span class=\"token function\">git</span> checkout -b develop\n\n<span class=\"token comment\"># 远程创建仓库创建项目将程序员拉到组里面</span>\n操作: 在gitlab服务器上在开发组中创建项目<span class=\"token punctuation\">(</span>远程仓库<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 关联本地项目和远程仓库</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin 远程仓库地址\n<span class=\"token comment\"># 修改项目的远程仓库地址</span>\n<span class=\"token function\">git</span> remote set-url origin 新的git远程仓库地址\n\n<span class=\"token comment\"># 将本地所有的分支推送到远程-同名分支</span>\n<span class=\"token function\">git</span> push -u origin --all\n<span class=\"token comment\"># 将本地标签推送到远程</span>\n<span class=\"token function\">git</span> push -u origin --tags\n\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div></div><h2 id=\"二、开发者常用命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二、开发者常用命令\" aria-hidden=\"true\">#</a> 二、开发者常用命令</h2>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code><span class=\"token comment\"># 克隆远程仓库的代码</span>\n<span class=\"token function\">git</span> clone 远程仓库地址\n\n<span class=\"token comment\"># 创建develop并且切换到该分支，最后关联到远程的develop</span>\n<span class=\"token function\">git</span> checkout -b develop origin/develop\n<span class=\"token comment\"># 从develop克隆出功能分支feature/amin</span>\n<span class=\"token function\">git</span> checkout -b feature/amin\n<span class=\"token comment\"># 接下来就可以在功能分支上开发代码了。。。</span>\n<span class=\"token string\">\"\"</span>\"\nprint<span class=\"token punctuation\">(</span><span class=\"token string\">\"在这里写代码\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"\"</span>\"\n<span class=\"token comment\"># 当前的feature/amin推送到远程feature/amin[自动新建]</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>  添加对应文件\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"提交说明\"</span>\n<span class=\"token function\">git</span> push --set-upstream origin feature/amin_test\n操作: 发起合并请求\n\n<span class=\"token comment\">#合并成功后，删除开发分支</span>\n<span class=\"token function\">git</span> branch -d feature/amin   <span class=\"token comment\"># 删除本地分支</span>\n<span class=\"token function\">git</span> branch -dr origin/feature/amin <span class=\"token comment\"># 删除远程分支（这步一般无需开发者操作）</span>\n\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div></div><h2 id=\"三、集中测试和发布阶段常用命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三、集中测试和发布阶段常用命令\" aria-hidden=\"true\">#</a> 三、集中测试和发布阶段常用命令</h2>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code>\n<span class=\"token comment\"># ==========将feature/amin合并到develop分支==============</span>\n<span class=\"token function\">git</span> checkout -b feature/amin\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit\n<span class=\"token function\">git</span> checkout develop\n<span class=\"token function\">git</span> merge feature/amin  <span class=\"token comment\"># 将feature/amin合并到develop分支</span>\n<span class=\"token function\">git</span> push <span class=\"token comment\"># 推送</span>\n<span class=\"token function\">git</span> log <span class=\"token comment\"># 查看版本号</span>\n\n<span class=\"token comment\"># ==========将feature/amin合并到master分支==============</span>\n<span class=\"token comment\"># 切换到主分支</span>\n<span class=\"token function\">git</span> checkout master \n<span class=\"token comment\"># 拉取最新代码</span>\n<span class=\"token function\">git</span> pull\n<span class=\"token comment\"># 将指定的版本合并到当前[master]分支中</span>\n<span class=\"token function\">git</span> merge dev\n<span class=\"token function\">git</span> cherry-pick 版本号  \n<span class=\"token comment\"># 推送</span>\n<span class=\"token function\">git</span> push\n<span class=\"token comment\"># 打标签</span>\n<span class=\"token function\">git</span> tag -a <span class=\"token number\">0.1</span> -m xxx\n<span class=\"token comment\"># 推送所有标签</span>\n<span class=\"token function\">git</span> push --tags\n\n<span class=\"token function\">git</span> branch -d feature/amin   <span class=\"token comment\"># 删除本地分支</span>\n<span class=\"token function\">git</span> branch -dr origin/feature/amin <span class=\"token comment\"># 删除远程分支</span>\n\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div></div><h2 id=\"四、切错分支修复方案-回滚-保留\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#四、切错分支修复方案-回滚-保留\" aria-hidden=\"true\">#</a> 四、切错分支修复方案，回滚（保留）</h2>\n<h3 id=\"未提交的情况下\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#未提交的情况下\" aria-hidden=\"true\">#</a> 未提交的情况下</h3>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">未提交</p>\n<p>git add . (把所有改动暂存)</p>\n<p>git stash (把暂存的文件提交到git的暂存栈)</p>\n<p>git checkout 本该提交代码的分支</p>\n<p>git stash pop (将暂存栈中的代码放出来)</p>\n<p>至于是继续改还是提交就随你了</p>\n</div>\n<h3 id=\"已提交到本地仓库的情况下\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#已提交到本地仓库的情况下\" aria-hidden=\"true\">#</a> 已提交到本地仓库的情况下</h3>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">已提交</p>\n<p>git checkout 不该提交代码提交了代码的分支</p>\n<p>git reset HEAD~1 （这个命令会将 HEAD 指针移动到指定的提交，1代表最近一次提交放回暂存区, 并取消此次提交，2代表最近两次提交，根据自己的提交次数填写）</p>\n<p>git stash (把暂存的文件提交到git的暂存栈)</p>\n<p>git checkout 该提交代码的分支</p>\n<p>git stash pop</p>\n<p>等你把代码提交到了正确的分支后，再次切到刚刚错的分支</p>\n<p>git push origin 错误的分支 -f (把不该上去的文件回退掉)</p>\n</div>\n<h3 id=\"回滚-拿出来重点讲下\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#回滚-拿出来重点讲下\" aria-hidden=\"true\">#</a> 回滚，拿出来重点讲下</h3>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code><span class=\"token function\">git</span> reset <span class=\"token string\">\"HEAD^\"</span> <span class=\"token comment\">#回退到最近一次，工作区修改保留</span>\n\n<span class=\"token function\">git</span> reset HEAD~1 <span class=\"token comment\"># 这个命令会将 HEAD 指针移动到指定的提交，1代表最近一次提交放回暂存区, 并取消此次提交，2代表最近两次提交，根据自己的提交次数填写</span>\n\n<span class=\"token function\">git</span> reset --hard HEAD~1  <span class=\"token comment\">#暂存区的修改和工作区的后面的修改，全都不保留，所以慎用 --hard</span>\n\n<span class=\"token function\">git</span> reset  版本号\n\n<span class=\"token function\">git</span> reset  --hard 版本号\n\n<span class=\"token function\">git</span> reset --hard HEAD <span class=\"token comment\">#回退到头结点，丢弃所有改动</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><h3 id=\"merge-or-rebase\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#merge-or-rebase\" aria-hidden=\"true\">#</a> merge or rebase</h3>\n<ul>\n<li>区别：\n1、rebase把当前的commit放到公共分支的最后面，merge把当前的commit和公共分支合并在一起。\nrebase会把当前分支的 commit 放到公共分支的最后面,所以叫变基。就好像从公共分支又重新拉出来这个分支一样。</li>\n</ul>\n<p>举例:</p>\n<p>如果从 master 拉个feature分支出来,然后提交了几个 commit,这个时候刚好有人把他开发的东西合并到 master 了,这个时候 master 就比你拉分支的时候多了几个 commit,\n如果这个时候你 rebase master 的话，就会把你当前的几个 commit，放到那个人 commit 的后面。</p>\n<p>2、用merge命令解决完冲突后会产生一个commit，而用rebase命令解决完冲突后不会产生额外的commit。\nmerge会把公共分支和你当前的commit 合并在一起，形成一个新的 commit 提交</p>\n<ul>\n<li>优点和缺点：</li>\n</ul>\n<p>（一股脑）使用merge命令合并分支，解决完冲突，执行git add .和git commit -m'fix conflict'。这个时候会产生一个commit。</p>\n<p>（交互式）使用rebase命令合并分支，解决完冲突，执行git add .和git rebase --continue，不会产生额外的commit。\n这样的好处是，‘干净’，分支上不会有无意义的解决分支的commit；坏处，如果合并的分支中存在多个commit，需要重复处理多次冲突。</p>\n<ul>\n<li>git pull和git pull --rebase区别：</li>\n</ul>\n<p>git pull做了两个操作分别是‘获取’和合并。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</p>\n<h3 id=\"git-merge-回退\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#git-merge-回退\" aria-hidden=\"true\">#</a> git merge 回退</h3>\n<h4 id=\"_1-未commit-未push\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-未commit-未push\" aria-hidden=\"true\">#</a> 1.未commit,未push</h4>\n<h5 id=\"方式1-利用idea-的可视化操作-rollback\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#方式1-利用idea-的可视化操作-rollback\" aria-hidden=\"true\">#</a> 方式1： 利用idea 的可视化操作 rollback</h5>\n<ul>\n<li>\n<p>方式2：idea切换到其他分支，再切回来会提示这个分支有东西没有commit,让你选择commit还是drop commit，选择删除就行了</p>\n</li>\n<li>\n<p>方式3：git reset --hard HEAD 回退到头结点，丢弃所有改动</p>\n</li>\n</ul>\n<h5 id=\"_2-已提交-未push\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-已提交-未push\" aria-hidden=\"true\">#</a> 2.已提交，未push</h5>\n<p>此时只需要改本地分支上的提交就行了</p>\n<ul>\n<li>\n<p>方式1： git reset --head &quot;HEAD^&quot;</p>\n</li>\n<li>\n<p>方式2： git revert  # 这个命令会创建一个新的提交，这个新的提交会撤销指定的提交。</p>\n</li>\n<li>\n<p>方式3： git rebase  # 如果你想彻底从你的提交历史中删除一些内容。但是这个命令比较复杂，并且可能会对你的提交历史造成不可逆的影响。请在使用 git rebase 命令之前详细阅读相关的文档</p>\n</li>\n</ul>\n<h5 id=\"_3-已提交-已push\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-已提交-已push\" aria-hidden=\"true\">#</a> 3.已提交，已push</h5>\n<ul>\n<li>方式1：</li>\n</ul>\n<p>git log 查看提交记录,选择回退到的commitId</p>\n<p>git reset --hard   *******(*是commitId)</p>\n<p>git reset回退干脆利落，但是会丢失提交记录，比如你回退test分支，此时刚好有人提交东西到test,回造成他人代码丢失（严重）</p>\n<p>git reset执行完成push到远程需要强制推送</p>\n<p>git push --force orign</p>\n<ul>\n<li>方式2：</li>\n</ul>\n<p>git revert *******(*是commitId)</p>\n<p>git revert回滚会保留旧的提交记录，生成一条回退记录，是不错的选择，但是在多分支并行开发的模式下会导致有些commit和并不到目标分支上</p>\n<p>例如  feature/amin   test  master三个分支</p>\n<p>feature/amin合并到test,然后git revert</p>\n<p>test 合并到master,然后feature/amin合并到master上你会发现合并不了</p>\n","export * from \"-!../../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[1]!../../../../../node_modules/@vuepress/bundler-webpack/lib/build/ssr/vuepressLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./git.html.vue?vue&type=template&id=91ddfe6c\"","import { ssrRender } from \"./git.html.vue?vue&type=template&id=91ddfe6c\"\nconst script = {}\nimport { ssrContextKey } from 'vue'\nscript.ssrRender = (...args) => {\n  const ssrContext = args[2].appContext.provides[ssrContextKey]\n  ssrContext._registeredComponents.add(\"D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\@vuepress\\\\bundler-webpack\\\\lib\\\\build\\\\ssr\\\\vuepressLoader.js!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\node_modules\\\\vue-loader\\\\dist\\\\index.js??ruleSet[0].use[1]!D:\\\\yaomin\\\\WorkSpace\\\\yaomin_java2\\\\docs\\\\.vuepress\\\\.temp\\\\pages\\\\soft\\\\git.html.vue\")\n  return ssrRender(...args)\n}\n\n\nexport default script"],"names":["$withBase"],"sourceRoot":""}